let scene,camera,controls,renderer,ambient,sun,objectPlane,flaggers=[];const signs=[[],[],[],[],[],[],[]],container=document.getElementById("container"),raycaster=new THREE.Raycaster,mouse=new THREE.Vector2,selected=null;let hovered=null;const glow=new THREE.MeshLambertMaterial({color:12029393,emissive:3355443}),red=new THREE.MeshLambertMaterial({color:16283254}),green=new THREE.MeshLambertMaterial({color:7915401}),blue=new THREE.MeshLambertMaterial({color:2275554}),orange=new THREE.MeshLambertMaterial({color:16167729}),yellow=new THREE.MeshLambertMaterial({color:16636748}),purple=new THREE.MeshLambertMaterial({color:12029393}),white=new THREE.MeshLambertMaterial({color:16777215}),gray=new THREE.MeshLambertMaterial({color:5592405}),palegray=new THREE.MeshLambertMaterial({color:8881006}),shadows=new THREE.ShadowMaterial({opacity:.3}),windowColor=new THREE.MeshLambertMaterial({color:13688291,transparent:!0,opacity:.5}),clickBoxMaterial=new THREE.MeshLambertMaterial({color:13688291,transparent:!0,opacity:0}),truckMaterial=new THREE.MeshLambertMaterial({color:15697223}),skinTone1=new THREE.MeshLambertMaterial({color:9262372}),skinTone2=new THREE.MeshLambertMaterial({color:13010498}),skinTone3=new THREE.MeshLambertMaterial({color:15843965}),skinTone4=new THREE.MeshLambertMaterial({color:16767916}),workerSign=(new THREE.TextureLoader).load("images/sign-01.png"),workerSignMaterial=new THREE.MeshBasicMaterial({map:workerSign}),flaggerSign=(new THREE.TextureLoader).load("images/sign-02.png"),flaggerSignMaterial=new THREE.MeshBasicMaterial({map:flaggerSign}),leftSign=(new THREE.TextureLoader).load("images/sign-03.png"),leftSignMaterial=new THREE.MeshBasicMaterial({map:leftSign}),rightSign=(new THREE.TextureLoader).load("images/sign-04.png"),rightSignMaterial=new THREE.MeshBasicMaterial({map:rightSign}),prepareStopSign=(new THREE.TextureLoader).load("images/sign-05.png"),prepareStopSignMaterial=new THREE.MeshBasicMaterial({map:prepareStopSign}),oneLaneSign=(new THREE.TextureLoader).load("images/sign-06.png"),oneLaneSignMaterial=new THREE.MeshBasicMaterial({map:oneLaneSign}),machineAheadSign=(new THREE.TextureLoader).load("images/sign-07.png"),machineAheadSignMaterial=new THREE.MeshBasicMaterial({map:machineAheadSign}),workAheadSign=(new THREE.TextureLoader).load("images/sign-08.png"),workAheadSignMaterial=new THREE.MeshBasicMaterial({map:workAheadSign}),constSign=(new THREE.TextureLoader).load("images/sign-09.png"),constSignMaterial=new THREE.MeshBasicMaterial({map:constSign}),utilitySign=(new THREE.TextureLoader).load("images/sign-10.png"),utilitySignMaterial=new THREE.MeshBasicMaterial({map:utilitySign}),rLaneSign=(new THREE.TextureLoader).load("images/sign-11.png"),rLaneSignMaterial=new THREE.MeshBasicMaterial({map:rLaneSign}),menWorkSign=(new THREE.TextureLoader).load("images/sign-12.png"),menWorkSignMaterial=new THREE.MeshBasicMaterial({map:menWorkSign}),lLaneSign=(new THREE.TextureLoader).load("images/sign-13.png"),lLaneMaterial=new THREE.MeshBasicMaterial({map:lLaneSign}),fMenSign=(new THREE.TextureLoader).load("images/sign-14.png"),fMenSignMaterial=new THREE.MeshBasicMaterial({map:fMenSign}),flagAheadSign=(new THREE.TextureLoader).load("images/sign-15.png"),flagAheadSignMaterial=new THREE.MeshBasicMaterial({map:flagAheadSign}),closedSign=(new THREE.TextureLoader).load("images/sign-16.png"),closedSignMaterial=new THREE.MeshBasicMaterial({map:closedSign}),endWorkSign=(new THREE.TextureLoader).load("images/sign-17.png"),endSignMaterial=new THREE.MeshBasicMaterial({map:endWorkSign}),coneGeometry=new THREE.CylinderGeometry(.07,.2,.5,32,.8,!1,.8),coneBottomG=new THREE.BoxGeometry(.5,.06,.5);coneBottomG.translate(0,-.23,0),coneGeometry.merge(coneBottomG),coneGeometry.scale(1.5,1.5,1.5),coneGeometry.translate(0,.125,0);const stripeGeometry=new THREE.CylinderGeometry(.116,.155,.15,32,1,!1,.8);stripeGeometry.scale(1.5,1.5,1.5),stripeGeometry.translate(0,.125,0);let showing="none";function slide(e){"none"!==showing&&(document.getElementById(showing).style.top="-535px"),"none"!==showing&&document.getElementById("button-"+showing).classList.remove("selected"),showing===e?showing="none":(document.getElementById("button-"+e).classList.add("selected"),document.getElementById(e).style.top="100px",showing=e)}function init(){scene=new THREE.Scene,window.scene=scene,window.THREE=THREE,initRoad(),initBackHoe(),initTruck(),initWorkers(),initCamera(),initLights(),initRender()}function initCamera(){(camera=new THREE.PerspectiveCamera(60,window.innerWidth/(window.innerHeight-100),1,100)).position.set(0,45,25)}function initLights(){ambient=new THREE.HemisphereLight(14610162,6708333,.9),(sun=new THREE.SpotLight(16571508,.2)).position.set(-50,40,-5),sun.castShadow=!0,sun.shadow.camera.left=-10,sun.shadow.camera.right=10,sun.shadow.camera.top=10,sun.shadow.camera.bottom=-10,sun.shadow.camera.near=.1,sun.shadow.camera.far=1e3,sun.shadow.mapSize.width=2048,sun.shadow.mapSize.height=2048,scene.add(ambient),scene.add(sun)}function initRender(){(renderer=new THREE.WebGLRenderer({antialias:!0})).setSize(window.innerWidth,window.innerHeight-100),renderer.setClearColor(13498879,1),renderer.setPixelRatio(window.devicePixelRatio),renderer.shadowMap.enabled=!0,renderer.shadowMap.type=THREE.PCFSoftShadowMap,container.appendChild(renderer.domElement),(controls=new THREE.OrbitControls(camera,renderer.domElement)).addEventListener("change",render),container.addEventListener("mousemove",onDocumentMouseMove,!1),container.addEventListener("mouseup",onDocumentMouseCancel,!1),container.addEventListener("mousedown",onDocumentMouseDown,!1),container.addEventListener("touchmove",onDocumentTouchMove,!1),container.addEventListener("touchstart",onDocumentTouchStart,!1),container.addEventListener("touchend",onDocumentTouchEnd,!1)}function initBackHoe(){const e=new THREE.Geometry,t=new THREE.Geometry,r=new THREE.Geometry,n=new THREE.BoxGeometry(4,.5,1.2);n.translate(.75,.25,-.5),e.merge(n);const a=new THREE.BoxGeometry(.5,.5,1.2);a.translate(-1,1,-.5),a.vertices[4].y-=.5,a.vertices[5].y-=.5,e.merge(a);const s=new THREE.BoxGeometry(.25,.5,1.2);s.translate(-.63,1,-.5),e.merge(s);const o=new THREE.BoxGeometry(2.5,.25,1.2);o.translate(0,.625,-.5),e.merge(o);const c=new THREE.BoxGeometry(1.9,.1,1.3);c.translate(.4,2.3,-.5),e.merge(c);const i=new THREE.BoxGeometry(.75,.5,.25);i.translate(2.55,.25,.25),i.vertices[4].x-=.5,i.vertices[5].x-=.5,i.vertices[0].y+=.55,i.vertices[1].y+=.55,i.vertices[0].x-=.4,i.vertices[1].x-=.4,i.vertices[2].y+=1,i.vertices[3].y+=1,i.vertices[6].y+=.5,i.vertices[7].y+=.5,i.vertices[6].x+=.2,i.vertices[7].x+=.2,e.merge(i),i.translate(0,0,-1.5),e.merge(i);const m=new THREE.BoxGeometry(1,.25,.3);m.translate(3.025,1.18,.25),m.vertices[4].x+=.35,m.vertices[5].x+=.35,m.vertices[0].y-=.3,m.vertices[1].y-=.3,m.vertices[2].y-=.5,m.vertices[3].y-=.5,e.merge(m),m.translate(0,0,-1.5),e.merge(m);const l=new THREE.BoxGeometry(.75,.45,.3);l.translate(3.9,.78,.25),l.vertices[0].y-=.5,l.vertices[1].y-=.5,l.vertices[0].x+=.2,l.vertices[1].x+=.2,l.vertices[2].y-=.5,l.vertices[3].y-=.5,e.merge(l),l.translate(0,0,-1.5),e.merge(l);const g=new THREE.TorusGeometry(.34,.1,4,50,6.3);g.translate(-.25,-.213,.415),e.merge(g),g.translate(0,0,-1.825),e.merge(g),g.translate(3.2,0,0),e.merge(g),g.translate(0,0,1.825),e.merge(g);const E=new THREE.CylinderGeometry(.5,.5,.3,32);E.translate(-.25,.2,.25),E.rotateX(1.6),e.merge(E),E.translate(0,0,-1.3),e.merge(E),E.translate(3.25,0,0),e.merge(E),E.translate(0,0,1.3),e.merge(E);const d=new THREE.Mesh(e,truckMaterial);r.merge(e);const v=new THREE.BoxGeometry(2.75,1.75,1.125);v.translate(.94,1.375,-.5),v.vertices[0].x-=1.1,v.vertices[1].x-=1.1,v.vertices[3].y+=.15,v.vertices[2].y+=.15;const y=new THREE.Mesh(v,windowColor);d.add(y),r.merge(v);let w=new THREE.BoxGeometry(.1,1.5,.1);w.translate(-.45,1.5,.05),t.merge(w),w.translate(.55,0,0),t.merge(w),w.translate(0,0,-1.1),t.merge(w),w.translate(-.55,0,0),t.merge(w),(w=new THREE.BoxGeometry(.05,1.5,.1)).translate(1.23,1.5,.05),t.merge(w),w.translate(0,0,-1.1),t.merge(w);const u=new THREE.BoxGeometry(.05,1.75,.1);u.translate(1.28,1.375,.05),u.vertices[0].y-=.05,u.vertices[1].y-=.05,t.merge(u),u.translate(0,0,-1.1),t.merge(u);const T=new THREE.BoxGeometry(.1,.25,.1);T.translate(2.3,.625,.05),T.vertices[0].y-=.05,T.vertices[1].y-=.05,t.merge(T),T.translate(0,0,-1.1),t.merge(T);let h=new THREE.BoxGeometry(1.75,.1,.1);h.translate(.375,2.2,.05),t.merge(h),h.translate(0,0,-1.1),t.merge(h),(h=new THREE.BoxGeometry(1,.1,.1)).translate(1.75,.55,.05),t.merge(h),h.translate(0,0,-1.1),t.merge(h),(h=new THREE.BoxGeometry(1.75,.5,.1)).translate(.4,1,.05),t.merge(h),h.translate(0,0,-1.1),t.merge(h);const x=new THREE.BoxGeometry(.01,.2,1);x.translate(-.496,1.3,-.5),t.merge(x),x.translate(0,.9,0),t.merge(x);const H=new THREE.BoxGeometry(1.045,.1,.1);H.translate(1.825,2.155,.05),H.vertices[0].y-=1.5,H.vertices[1].y-=1.5,H.vertices[2].y-=1.5,H.vertices[3].y-=1.5,t.merge(H),H.translate(0,0,-1.1),t.merge(H);const R=new THREE.BoxGeometry(.1,.1,1);R.translate(2.3,.55,-.5),t.merge(R);const B=new THREE.BoxGeometry(.4,.1,.4);B.translate(.7,.75,-.5),t.merge(B);const p=new THREE.BoxGeometry(.1,.7,.4);p.translate(.45,1.05,-.5),t.merge(p);const M=new THREE.CylinderGeometry(.2,.2,.05,32);M.translate(1.5,-.75,-.5),M.rotateZ(1.2),t.merge(M);const G=new THREE.BoxGeometry(.95,.24,.98);G.translate(1.75,.65,-.5),t.merge(G);const f=new THREE.BoxGeometry(.95,.5,.98);f.translate(1.75,1,-.5),f.vertices[0].x-=.4,f.vertices[1].x-=.4,t.merge(f);const z=new THREE.Shape;z.moveTo(0,.75),z.bezierCurveTo(0,1.75,1.5,1.75,1.5,.75),z.lineTo(1.125,.75001),z.bezierCurveTo(1.125,1.25,.375,1.25,.375,.75),z.bezierCurveTo(.375,.35,1.125,.35,1.125,.75),z.lineTo(1.5,.75001),z.bezierCurveTo(1.5,-.125,0,-.125,0,.75);const b=new THREE.ExtrudeGeometry(z,{amount:.5,steps:50,bevelEnabled:!1,curveSegments:8});b.translate(-1,-1,0),t.merge(b),b.translate(0,0,-1.5),t.merge(b),b.translate(3.2,0,0),t.merge(b),b.translate(0,0,1.5),t.merge(b);const S=new THREE.CylinderGeometry(.15,.15,.3,6);S.rotateX(1.6),S.translate(-.25,-.2,.3),t.merge(S),S.translate(0,0,-1.5),t.merge(S),S.translate(3.2,0,0),t.merge(S),S.translate(0,0,1.5),t.merge(S);let L=new THREE.BoxGeometry(.2,.2,1.5);L.translate(-1.25,0,-.5),t.merge(L),(L=new THREE.BoxGeometry(.32,.2,1.5)).translate(-1.19,-.2,-.5),t.merge(L),(L=new THREE.BoxGeometry(1.25,.2,1.5)).translate(1.25,-.2,-.5),t.merge(L),(L=new THREE.BoxGeometry(.2,.2,.9)).translate(2.75,-.2,-.45),t.merge(L);const k=new THREE.BoxGeometry(.05,.2,.5);k.translate(-1.25,.3,-.5),t.merge(k);let I=new THREE.BoxGeometry(.5,.2,2);I.rotateZ(.2),I.translate(4.825,.7,-.5),t.merge(I),(I=new THREE.BoxGeometry(1,.2,2)).rotateZ(1.15),I.translate(4.45,.25,-.5),t.merge(I),(I=new THREE.BoxGeometry(1,.2,2)).rotateZ(-.7),I.translate(4.61,-.42,-.5),t.merge(I),(I=new THREE.BoxGeometry(.75,.2,2)).translate(5.3,-.717,-.5),t.merge(I),(I=new THREE.BoxGeometry(.5,.25,.2)).translate(4.839,.53,.4),I.vertices[6].y+=.2,I.vertices[7].y+=.2,I.vertices[2].y+=.1,I.vertices[3].y+=.1,I.vertices[2].x-=.15,I.vertices[3].x-=.15,t.merge(I),I.translate(0,0,-1.8),t.merge(I),(I=new THREE.BoxGeometry(.75,.25,.2)).translate(5.3,-.5,.4),I.vertices[4].x+=.2,I.vertices[5].x+=.2,I.vertices[0].y-=.2,I.vertices[1].y-=.2,t.merge(I),I.translate(0,0,-1.8),t.merge(I),(I=new THREE.BoxGeometry(.75,.75,.2)).translate(4.75,.25,.4),I.vertices[2].x+=.1,I.vertices[3].x+=.1,I.vertices[4].x+=.2,I.vertices[5].x+=.2,I.vertices[0].x-=.23,I.vertices[1].x-=.23,I.vertices[0].y+=.02,I.vertices[1].y+=.02,t.merge(I),I.translate(0,0,-1.8),t.merge(I),(I=new THREE.BoxGeometry(.5,.5,.2)).translate(4.875,-.375,.4),I.vertices[0].x+=.1,I.vertices[1].x+=.1,I.vertices[2].x+=.3,I.vertices[3].x+=.3,I.vertices[4].x-=.25,I.vertices[5].x-=.25,I.vertices[6].x+=.05,I.vertices[7].x+=.05,I.vertices[6].y+=.05,I.vertices[7].y+=.05,t.merge(I),I.translate(0,0,-1.8),t.merge(I);const C=new THREE.Mesh(t,gray);d.add(C),r.merge(t);const A=new THREE.Mesh(r,shadows);d.add(A),d.castShadow=!0,d.position.set(2.5,1.4,-15),scene.add(d)}function flagger(e,t){const r=new THREE.Geometry,n=new THREE.Geometry,a=new THREE.Geometry,s=new THREE.Geometry,o=new THREE.Geometry,c=new THREE.Geometry,i=new THREE.BoxGeometry(1.7,2,1);i.rotateY(-.5),i.center(),i.translate(.05,0,0);const m=new THREE.Mesh(i,clickBoxMaterial),l=new THREE.BoxGeometry(1,1.4,.8);l.translate(0,.1,0),l.vertices[0].z-=.15,l.vertices[0].x-=.15,l.vertices[1].z+=.15,l.vertices[1].x-=.15,l.vertices[4].z+=.15,l.vertices[4].x+=.15,l.vertices[5].z-=.15,l.vertices[5].x+=.15,l.rotateY(-.5),l.translate(.45,0,.7),l.scale(.5,.5,.5),s.merge(l);const g=new THREE.SphereGeometry(.2,32,32,1,6.3,0,1.5);g.translate(0,.7,0);const E=new THREE.CylinderGeometry(.2,.2,.02,32);E.translate(0,.72,.1),g.merge(E),g.rotateY(-.5),g.translate(.225,0,.345),s.merge(g);const d=new THREE.CylinderGeometry(.4,.4,.1,8);d.translate(.75,.25,-.55),d.rotateZ(1.25),d.rotateY(.75),d.rotateX(.5),s.merge(d),s.center(),s.translate(0,.2,0);const v=new THREE.Mesh(s,t);v.castShadow=!0,c.merge(s),m.add(v);const y=new THREE.BoxGeometry(.2,.5,.4);y.translate(-.13,.17,0),y.vertices[0].z-=.05,y.vertices[1].z+=.05,y.vertices[4].z+=.05,y.vertices[4].x+=.05,y.vertices[5].z-=.05,y.vertices[5].x+=.05,r.merge(y);const w=new THREE.BoxGeometry(.2,.5,.4);w.translate(.13,.17,0),w.vertices[5].z-=.05,w.vertices[4].z+=.05,w.vertices[1].z+=.05,w.vertices[1].x-=.05,w.vertices[0].z-=.05,w.vertices[0].x-=.05,r.merge(w);const u=new THREE.BoxGeometry(.2,.5,.025);u.translate(0,.17,-.1875),u.vertices[0].z+=.05,u.vertices[1].z+=.05,u.vertices[4].z+=.05,u.vertices[5].z+=.05,r.merge(u),r.rotateY(-.5),r.center(),r.translate(.295,-.12,.165);const T=new THREE.Mesh(r,orange);T.castShadow=!0,c.merge(r),m.add(T);let h=new THREE.BoxGeometry(.05,.5,.001);h.translate(-.11,.17,.201),h.vertices[0].z-=.05,h.vertices[1].z-=.05,h.vertices[4].z-=.05,h.vertices[5].z-=.05,n.merge(h),h.translate(.22,0,0),n.merge(h),(h=new THREE.BoxGeometry(.05,.5,.001)).translate(-.11,.17,-.201),h.vertices[0].z+=.05,h.vertices[1].z+=.05,h.vertices[4].z+=.05,h.vertices[5].z+=.05,n.merge(h),h.translate(.22,0,0),n.merge(h),(h=new THREE.BoxGeometry(.05,.001,.3)).translate(-.11,.42,0),n.merge(h),h.translate(.22,0,0),n.merge(h),(h=new THREE.BoxGeometry(.2,.2,.001)).translate(-.13,.02,.201),h.vertices[4].x+=.02,h.vertices[5].x+=.02,h.vertices[0].z-=.02,h.vertices[1].z-=.02,h.vertices[4].z-=.02,h.vertices[5].z-=.02,n.merge(h),(h=new THREE.BoxGeometry(.2,.2,.001)).translate(.13,.02,.201),h.vertices[0].x-=.02,h.vertices[1].x-=.02,h.vertices[0].z-=.02,h.vertices[1].z-=.02,h.vertices[4].z-=.02,h.vertices[5].z-=.02,n.merge(h),(h=new THREE.BoxGeometry(.001,.2,.4)).translate(-.23,.02,0),h.vertices[0].x+=.02,h.vertices[1].x+=.02,h.vertices[4].x+=.02,h.vertices[5].x+=.02,h.vertices[0].z-=.02,h.vertices[1].z+=.02,h.vertices[4].z+=.02,h.vertices[5].z-=.02,n.merge(h),(h=new THREE.BoxGeometry(.001,.2,.4)).translate(.23,.02,0),h.vertices[0].x-=.02,h.vertices[1].x-=.02,h.vertices[4].x-=.02,h.vertices[5].x-=.02,h.vertices[0].z-=.02,h.vertices[1].z+=.02,h.vertices[4].z+=.02,h.vertices[5].z-=.02,n.merge(h),(h=new THREE.BoxGeometry(.45,.2,.001)).translate(0,.02,-.201),h.vertices[0].x-=.02,h.vertices[1].x-=.02,h.vertices[4].x+=.02,h.vertices[5].x+=.02,h.vertices[0].z+=.02,h.vertices[1].z+=.02,h.vertices[4].z+=.02,h.vertices[5].z+=.02,n.merge(h),n.rotateY(-.5),n.center(),n.translate(.295,-.12,.165);const x=new THREE.Mesh(n,yellow);c.merge(n),m.add(x);const H=new THREE.BoxGeometry(.5,.8,.8);H.translate(-.25,-1,0),H.vertices[0].x-=.1,H.vertices[1].x-=.1,H.vertices[2].x-=.3,H.vertices[2].z-=.3,H.vertices[3].x-=.3,H.vertices[3].z+=.3,H.vertices[6].z+=.3,H.vertices[7].z-=.3,a.merge(H);const R=new THREE.BoxGeometry(.5,.8,.8);R.translate(.25,-1,0),R.vertices[4].x+=.1,R.vertices[5].x+=.1,R.vertices[2].z-=.3,R.vertices[3].z+=.3,R.vertices[6].x+=.3,R.vertices[6].z+=.3,R.vertices[7].x+=.3,R.vertices[7].z-=.3,a.merge(R),a.rotateY(-.5),a.scale(.5,.5,.5),a.center(),a.translate(.295,-.78,.165);const B=new THREE.Mesh(a,blue);T.castShadow=!0,c.merge(a),m.add(B);const p=new THREE.BoxGeometry(.5,.4,.5);p.translate(.64,.6,0),p.vertices[0].y-=.1,p.vertices[0].z+=.1,p.vertices[0].x-=.2,p.vertices[1].y-=.08,p.vertices[1].z+=.3,p.vertices[1].x-=.1,p.vertices[2].z+=.1,p.vertices[2].x-=.05,p.vertices[2].y+=.1,p.vertices[3].y+=.2,p.vertices[3].z+=.4,p.vertices[3].x+=.2,p.vertices[4].x-=.04,p.vertices[5].x-=.04,o.merge(p);const M=new THREE.BoxGeometry(.5,.3,.3);M.translate(1.14,.6,.3),M.vertices[0].y+=.25,M.vertices[0].z-=.1,M.vertices[0].x-=.65,M.vertices[1].y+=.25,M.vertices[1].z+=.05,M.vertices[1].x-=.5,M.vertices[2].y+=.55,M.vertices[2].z-=.05,M.vertices[2].x-=.55,M.vertices[3].y+=.55,M.vertices[3].z+=.1,M.vertices[3].x-=.4,M.vertices[4].x-=.1,M.vertices[4].z-=.1,M.vertices[4].y-=.03,M.vertices[5].y-=.05,M.vertices[5].z-=.1,M.vertices[5].x-=.2,M.vertices[6].x+=.2,M.vertices[6].y+=.15,M.vertices[6].z+=0,M.vertices[7].x-=.05,M.vertices[7].z-=.1,M.vertices[7].y+=.05,o.merge(M);const G=new THREE.BoxGeometry(1,.4,.5);G.translate(-.85,.6,0),G.vertices[5].y-=.8,G.vertices[5].z-=.1,G.vertices[4].y-=.8,G.vertices[4].z+=.1,G.vertices[7].y-=.5,G.vertices[7].z-=.1,G.vertices[6].y-=.5,G.vertices[6].z+=.1,G.vertices[3].x-=.04,G.vertices[2].x-=.04,o.merge(G);const f=new THREE.SphereGeometry(.35,32,32);f.translate(0,1.3,0),o.merge(f),o.rotateY(-.5),o.scale(.5,.5,.5),o.center(),o.translate(.215,.11,.155);const z=~~(3*Math.random()),b=[skinTone1,skinTone2,skinTone3,skinTone4],S=new THREE.Mesh(o,b[z]);c.merge(o),m.add(S);const L=new THREE.CylinderGeometry(.05,.05,2.4,32);L.scale(.5,.5,.5),L.center(),L.translate(-.3,-.3,-.15);const k=new THREE.Mesh(L,gray);c.merge(L),m.add(k);const I=new THREE.Mesh(c,shadows);m.add(I),m.rotation.set(0,-1.4,0),m.position.set(-6,1.48,-12),m.name=e+"-flagger1",scene.add(m),flaggers.push(m);const C=m.clone(!0);C.rotation.set(0,1.8,0),C.position.set(10,1.48,-28),C.name=e+"-flagger2",scene.add(C),flaggers.push(C)}function initRoad(){const e=new THREE.Geometry,t=new THREE.Geometry,r=new THREE.Geometry,n=new THREE.Geometry,a=new THREE.Geometry,s=new THREE.BoxGeometry(155,1,38);s.translate(0,0,-45.5),e.merge(s),s.translate(0,0,51),e.merge(s);const o=new THREE.Mesh(e,green);n.merge(e);const c=new THREE.BoxGeometry(155,1,13);c.translate(0,0,-20);const i=new THREE.Mesh(c,gray);o.add(i),n.merge(c);const m=new THREE.BoxGeometry(1,.1,.2);m.translate(-75,.5,-20),t.merge(m);for(let e=75;e>=-73;e-=2)m.translate(2,0,0),t.merge(m);const l=new THREE.Mesh(t,yellow);o.add(l);const g=coneGeometry.clone(!0),E=stripeGeometry.clone(!0);g.translate(0,.75,-19),a.merge(g),E.translate(0,.75,-19),r.merge(E);for(let e=1.5;e<=12;e+=2)g.translate(2,0,0),a.merge(g),E.translate(2,0,0),r.merge(E);const d=new THREE.Mesh(a,truckMaterial);o.add(d);const v=new THREE.BoxGeometry(155,.01,.1);v.translate(0,.5,-26),r.merge(v),v.translate(0,0,12),r.merge(v);const y=new THREE.Mesh(r,white);o.add(y);const w=new THREE.Mesh(n,shadows);w.position.set(0,3e-4,0),w.receiveShadow=!0,scene.add(w),objectPlane=w,o.castShadow=!0,scene.add(o)}function initTruck(){const e=new THREE.Geometry,t=new THREE.Geometry,r=new THREE.Geometry,n=new THREE.Geometry,a=new THREE.Geometry,s=new THREE.BoxGeometry(1,.8,1.3);s.translate(-.6,0,0),e.merge(s);const o=new THREE.BoxGeometry(.1,.8,1.3);o.translate(.52,.25,0),e.merge(o);const c=new THREE.BoxGeometry(.1,.7,.3);c.translate(.52,.85,.5),e.merge(c),c.translate(0,0,-1),e.merge(c);const i=new THREE.BoxGeometry(.8,.1,1.3);i.translate(.17,1.15,0),i.vertices[6].x-=.05,i.vertices[7].x-=.05,e.merge(i);const m=new THREE.BoxGeometry(.1,1,.1);m.translate(-.6,.52,-.6),m.rotateZ(-.4),e.merge(m),m.translate(0,0,1.2),e.merge(m);const l=new THREE.BoxGeometry(3.2,.3,1.3);l.translate(.9,-.31,0),e.merge(l);const g=new THREE.BoxGeometry(2.68,.6,.1);g.translate(1.15,.1,.6),e.merge(g),g.translate(0,0,-1.2),e.merge(g);const E=new THREE.BoxGeometry(.1,.6,1.3);E.translate(2.45,.1,0),e.merge(E),e.translate(0,1.5,0);const d=new THREE.TorusGeometry(.25,.1,3,199);d.translate(-.3,1.09,.63),e.merge(d),d.translate(0,0,-1.3),e.merge(d),d.translate(2,0,1.3),e.merge(d),d.translate(0,0,-1.3),e.merge(d);const v=new THREE.Mesh(e,white);a.merge(e);const y=new THREE.BoxGeometry(1,.8,1.29);y.vertices[4].x+=.26,y.vertices[5].x+=.26,y.vertices[6].x-=.035,y.vertices[7].x-=.035,y.vertices[0].y+=2.2,y.vertices[1].y+=2.2,y.vertices[2].y+=2.3,y.vertices[3].y+=2.3,y.vertices[4].y+=2.2,y.vertices[5].y+=2.2,y.vertices[6].y+=2.3,y.vertices[7].y+=2.3;const w=new THREE.Mesh(y,windowColor);v.add(w);const u=new THREE.BoxGeometry(.4,.1,.4);u.translate(.25,1.6,.3),r.merge(u),u.translate(0,0,-.6),r.merge(u);const T=new THREE.BoxGeometry(.1,.7,.4);T.translate(.45,1.8,.3),r.merge(T),T.translate(0,0,-.6),r.merge(T);const h=new THREE.CylinderGeometry(.2,.2,.05,32);h.translate(-1.9,.65,.3),h.rotateZ(-1.2),r.merge(h);const x=new THREE.CylinderGeometry(.45,.45,.2,32);x.translate(-.3,.55,-1.1),x.rotateX(1.6),r.merge(x),x.translate(0,0,-1.2),r.merge(x),x.translate(2,0,1.2),r.merge(x),x.translate(0,0,-1.2),r.merge(x);const H=new THREE.BoxGeometry(.01,.7,1.2);H.translate(-1.1,1.5,0),r.merge(H);const R=new THREE.BoxGeometry(.05,.2,.5);R.translate(2.5,1.25,0),r.merge(R);const B=new THREE.Mesh(r,gray);v.add(B),a.merge(r);const p=new THREE.BoxGeometry(.4,.1,1.4);p.translate(-.95,1.05,0),p.vertices[2].x+=.01,p.vertices[3].x+=.01,t.merge(p);const M=new THREE.BoxGeometry(1.1,.1,1.4);M.translate(.7,1.05,0),M.vertices[2].x+=.01,M.vertices[3].x+=.01,M.vertices[6].x-=.01,M.vertices[7].x-=.01,t.merge(M);const G=new THREE.BoxGeometry(.4,.1,1.4);G.translate(2.35,1.05,0),G.vertices[6].x-=.01,G.vertices[7].x-=.01,t.merge(G);const f=new THREE.Mesh(t,palegray);v.add(f),a.merge(t);const z=new THREE.BoxGeometry(.1,.1,.1);z.translate(2.5,1.25,.45),n.merge(z),z.translate(0,0,-.9),n.merge(z);const b=new THREE.BoxGeometry(.1,.05,.5);b.translate(.2,2.72,0),n.merge(b);const S=new THREE.Mesh(n,orange);v.add(S),a.merge(n);const L=new THREE.Mesh(a,shadows);v.add(L),v.rotation.set(0,.5,0),v.scale.set(.9,.9,.9),v.castShadow=!0,v.position.set(-2.5,0,-10),scene.add(v)}function initWorkers(){const e=new THREE.Geometry,t=new THREE.Geometry,r=new THREE.Geometry,n=new THREE.Geometry,a=new THREE.Geometry,s=new THREE.Geometry,o=new THREE.Geometry,c=new THREE.Geometry,i=[skinTone1,skinTone2,skinTone3,skinTone4];let m=new THREE.BoxGeometry(1,.4,.5);m.translate(3.55,1.8,6.5),m.vertices[0].y-=.75,m.vertices[1].y-=.75,m.vertices[2].y-=.5,m.vertices[3].y-=.5,m.vertices[0].x-=.5,m.vertices[1].x-=.5,m.vertices[2].x-=.5,m.vertices[3].x-=.5,m.vertices[0].z-=.15,m.vertices[1].z+=.15,m.vertices[2].z-=.15,m.vertices[3].z+=.15,m.rotateY(-1),e.merge(m);let l=new THREE.BoxGeometry(1,.4,.5);l.translate(1.85,1.8,6.5),l.vertices[5].y+=.3,l.vertices[4].y+=.3,l.vertices[7].y+=.55,l.vertices[6].y+=.55,l.vertices[5].x+=.8,l.vertices[4].x+=.8,l.vertices[7].x+=.8,l.vertices[6].x+=.8,l.vertices[5].z+=.9,l.vertices[4].z+=1.05,l.vertices[7].z+=.9,l.vertices[6].z+=1.05,l.rotateY(-1),e.merge(l);const g=new THREE.SphereGeometry(.35,32,32);g.translate(2.7,2.5,6.5),g.rotateY(-1),e.merge(g),e.scale(.5,.5,.5),e.translate(4.55,.6,3.5);let E=~~(3*Math.random());const d=new THREE.Mesh(e,i[E]);c.merge(e),m.rotateY(1.5),m.translate(-5.4,.1,.35),t.merge(m),g.translate(4.1,0,-1),t.merge(g),(l=new THREE.BoxGeometry(1,.4,.5)).translate(-.85,.6,0),l.vertices[4].y-=.75,l.vertices[5].y-=.75,l.vertices[6].y-=.5,l.vertices[7].y-=.5,l.vertices[0].x+=.05,l.vertices[1].x+=.05,l.vertices[4].x+=.5,l.vertices[5].x+=.5,l.vertices[6].x+=.5,l.vertices[7].x+=.5,l.vertices[4].z+=.15,l.vertices[5].z-=.15,l.vertices[6].z+=.15,l.vertices[7].z-=.15,l.rotateY(.5),l.translate(.065,1.3,4.79),t.merge(l),t.scale(.5,.5,.5),t.translate(4.52,.55,3.52),E=~~(3*Math.random());const v=new THREE.Mesh(t,i[E]);d.add(v),c.merge(t),(m=new THREE.BoxGeometry(1,.4,.5)).translate(.85,1.8,0),m.vertices[0].y-=.45,m.vertices[1].y-=.45,m.vertices[2].y-=.2,m.vertices[3].y-=.2,m.vertices[0].x-=.5,m.vertices[1].x-=.5,m.vertices[2].x-=.5,m.vertices[3].x-=.5,m.vertices[0].z+=.45,m.vertices[1].z+=.85,m.vertices[2].z+=.45,m.vertices[3].z+=.85,m.vertices[4].z+=.02,m.vertices[6].z-=.04,r.merge(m),(l=new THREE.BoxGeometry(1,.4,.5)).translate(-.85,1.8,0),l.vertices[5].y-=.45,l.vertices[4].y-=.45,l.vertices[7].y-=.2,l.vertices[6].y-=.2,l.vertices[5].x+=.5,l.vertices[4].x+=.5,l.vertices[7].x+=.5,l.vertices[6].x+=.5,l.vertices[5].z+=.45,l.vertices[4].z+=.85,l.vertices[7].z+=.45,l.vertices[6].z+=.85,l.vertices[1].z+=.02,l.vertices[3].z-=.04,r.merge(l),g.translate(-.1,0,-5),r.merge(g),r.scale(.5,.5,.5),r.rotateY(-.35),r.translate(5.95,.6,5.875),E=~~(3*Math.random());const y=new THREE.Mesh(r,i[E]);d.add(y),c.merge(r);const w=new THREE.BoxGeometry(1,1.4,.8);w.vertices[0].z-=.15,w.vertices[0].x-=.15,w.vertices[1].z+=.15,w.vertices[1].x-=.15,w.vertices[4].z+=.15,w.vertices[4].x+=.15,w.vertices[5].z-=.15,w.vertices[5].x+=.15,w.scale(.5,.5,.5),w.rotateY(-1),w.translate(2.55,1.25,6.4),o.merge(w),w.rotateY(1.5),w.translate(-2,0,8),o.merge(w),w.rotateY(-.8),w.translate(7,0,-1.5),o.merge(w);const u=new THREE.Mesh(o,palegray);d.add(u),c.merge(o);const T=new THREE.Geometry,h=new THREE.BoxGeometry(.2,.5,.4);h.translate(-.13,.17,0),h.vertices[0].z-=.05,h.vertices[1].z+=.05,h.vertices[4].z+=.05,h.vertices[4].x+=.05,h.vertices[5].z-=.05,h.vertices[5].x+=.05,T.merge(h);const x=new THREE.BoxGeometry(.2,.5,.4);x.translate(.13,.17,0),x.vertices[5].z-=.05,x.vertices[4].z+=.05,x.vertices[1].z+=.05,x.vertices[1].x-=.05,x.vertices[0].z-=.05,x.vertices[0].x-=.05,T.merge(x);const H=new THREE.BoxGeometry(.2,.5,.025);H.translate(0,.17,-.1875),H.vertices[0].z+=.05,H.vertices[1].z+=.05,H.vertices[4].z+=.05,H.vertices[5].z+=.05,T.merge(H),T.rotateY(-1),T.translate(2.55,1.19,6.4),n.merge(T),T.rotateY(1.5),T.translate(-2,0,8),n.merge(T),T.rotateY(-.8),T.translate(7,0,-1.5),n.merge(T);const R=new THREE.SphereGeometry(.2,32,32,1,6.3,0,1.5);R.translate(2.55,1.83,6.39),n.merge(R),R.translate(2,0,-.5),n.merge(R),R.translate(1.425,0,-.125),n.merge(R);const B=new THREE.CylinderGeometry(.2,.2,.02,32);B.translate(2.45,1.846,6.45),n.merge(B),B.translate(2.15,0,-.45),n.merge(B),B.translate(1.325,0,-.125),n.merge(B);const p=new THREE.Mesh(n,truckMaterial);d.add(p),c.merge(n);const M=new THREE.Geometry,G=new THREE.BoxGeometry(.05,.5,.001);G.translate(-.11,.17,.201),G.vertices[0].z-=.05,G.vertices[1].z-=.05,G.vertices[4].z-=.05,G.vertices[5].z-=.05,M.merge(G),G.translate(.22,0,0),M.merge(G);const f=new THREE.BoxGeometry(.05,.5,.001);f.translate(-.11,.17,-.201),f.vertices[0].z+=.05,f.vertices[1].z+=.05,f.vertices[4].z+=.05,f.vertices[5].z+=.05,M.merge(f),f.translate(.22,0,0),M.merge(f);const z=new THREE.BoxGeometry(.05,.001,.3);z.translate(-.11,.42,0),M.merge(z),z.translate(.22,0,0),M.merge(z);const b=new THREE.BoxGeometry(.2,.2,.001);b.translate(-.13,.02,.201),b.vertices[4].x+=.02,b.vertices[5].x+=.02,b.vertices[0].z-=.02,b.vertices[1].z-=.02,b.vertices[4].z-=.02,b.vertices[5].z-=.02,M.merge(b);const S=new THREE.BoxGeometry(.2,.2,.001);S.translate(.13,.02,.201),S.vertices[0].x-=.02,S.vertices[1].x-=.02,S.vertices[0].z-=.02,S.vertices[1].z-=.02,S.vertices[4].z-=.02,S.vertices[5].z-=.02,M.merge(S);const L=new THREE.BoxGeometry(.001,.2,.4);L.translate(-.23,.02,0),L.vertices[0].x+=.02,L.vertices[1].x+=.02,L.vertices[4].x+=.02,L.vertices[5].x+=.02,L.vertices[0].z-=.02,L.vertices[1].z+=.02,L.vertices[4].z+=.02,L.vertices[5].z-=.02,M.merge(L);const k=new THREE.BoxGeometry(.001,.2,.4);k.translate(.23,.02,0),k.vertices[0].x-=.02,k.vertices[1].x-=.02,k.vertices[4].x-=.02,k.vertices[5].x-=.02,k.vertices[0].z-=.02,k.vertices[1].z+=.02,k.vertices[4].z+=.02,k.vertices[5].z-=.02,M.merge(k);const I=new THREE.BoxGeometry(.45,.2,.001);I.translate(0,.02,-.201),I.vertices[0].x-=.02,I.vertices[1].x-=.02,I.vertices[4].x+=.02,I.vertices[5].x+=.02,I.vertices[0].z+=.02,I.vertices[1].z+=.02,I.vertices[4].z+=.02,I.vertices[5].z+=.02,M.merge(I),M.merge(H),M.rotateY(-1),M.translate(2.55,1.19,6.4),a.merge(M),M.rotateY(1.5),M.translate(-2,0,8),a.merge(M),M.rotateY(-.8),M.translate(7,0,-1.5),a.merge(M);const C=new THREE.Mesh(a,yellow);d.add(C),c.merge(a);const A=new THREE.BoxGeometry(.5,.8,.8);A.vertices[0].x-=.1,A.vertices[1].x-=.1,A.vertices[2].x-=.3,A.vertices[2].z-=.3,A.vertices[3].x-=.3,A.vertices[3].z+=.3,A.vertices[6].z+=.3,A.vertices[7].z-=.3,A.scale(.5,.5,.5),A.rotateY(-1),A.translate(2.485,.702,6.3),s.merge(A),A.rotateY(1.5),A.translate(-2,0,8),s.merge(A),A.rotateY(-.8),A.translate(7,0,-1.5),s.merge(A);const Y=new THREE.BoxGeometry(.5,.8,.8);Y.vertices[4].x+=.1,Y.vertices[5].x+=.1,Y.vertices[2].z-=.3,Y.vertices[3].z+=.3,Y.vertices[6].x+=.3,Y.vertices[6].z+=.3,Y.vertices[7].x+=.3,Y.vertices[7].z-=.3,Y.scale(.5,.5,.5),Y.rotateY(-1),Y.translate(2.615,.702,6.5),s.merge(Y),Y.rotateY(1.5),Y.translate(-2,0,8),s.merge(Y),Y.rotateY(-.8),Y.translate(7,0,-1.5),s.merge(Y);const O=new THREE.Mesh(s,blue);d.add(O),c.merge(s);const j=new THREE.BoxGeometry(.8,.6,.025);j.rotateX(.3),j.rotateY(-.3),j.translate(5.85,1.3,6.15);const N=new THREE.Mesh(j,white);d.add(N),c.merge(j);const D=new THREE.Mesh(c,shadows);d.add(D),d.castShadow=!0,d.position.set(-2.35,-.03,-17.55),scene.add(d)}function render(){scene.position.set(0,0,3),renderer.render(scene,camera)}function animate(){render(),controls.update()}function focusChange(e){e.parentNode.classList.add("inputFocus"),e.parentNode.classList.add("filled")}function focusStop(e){e.parentNode.classList.remove("inputFocus"),e.value||e.parentNode.classList.remove("filled")}init(),animate();const arrows=[[],[],[],[],[],[],[]];function arrowArray(e,t){const r=arrows[e].indexOf(t.value);-1!==r&&arrows[e].splice(r,1),t.checked&&arrows[e].unshift(t.value)}function arrowSign(e,t){if(arrows[t].length<0)return;const r=new THREE.Geometry,n=new THREE.Geometry,a=new THREE.BoxGeometry(3.5,4,1);a.rotateY(-1.2),a.center();const s=new THREE.Mesh(a,clickBoxMaterial),o=s.clone(),c=new THREE.CylinderGeometry(.05,.05,.5,32);c.translate(-1.1,2.95,-16.1),n.merge(c),c.translate(0,-.5,0),n.merge(c),c.translate(0,-.5,0),n.merge(c),c.translate(0,-.47,0),n.merge(c),c.translate(-.2,0,0),n.merge(c),c.translate(0,-.5,0),n.merge(c),c.translate(2.501,0,0),n.merge(c),c.translate(0,.5,0),n.merge(c),c.translate(-.2,0,0),n.merge(c),c.translate(0,.47,0),n.merge(c),c.translate(0,.5,0),n.merge(c),c.translate(0,.5,0),n.merge(c);const i=new THREE.CylinderGeometry(.05,.05,2.601,32);i.rotateZ(1.58),i.translate(-.05,1.75,-16.1),n.merge(i),i.translate(0,-.5,0),n.merge(i),i.translate(0,-.5,0),n.merge(i);const m=new THREE.CylinderGeometry(.3,.3,.3,32,1,!1,0,3.1);m.rotateZ(1.58),m.translate(1.4,.75,-16.1),n.merge(m),m.translate(-2.9,0,0),n.merge(m);const l=new THREE.CylinderGeometry(.01,.1,.2,32);l.rotateX(1.55),l.translate(-.4,3.7,-16.1),n.merge(l),l.translate(-.35,-.35,0),n.merge(l),l.translate(-.35,-.35,0),n.merge(l),l.translate(.7,0,0),n.merge(l),l.translate(.35,0,0),n.merge(l),l.translate(.35,0,0),n.merge(l),l.translate(.35,0,0),n.merge(l),l.translate(.35,0,0),n.merge(l),l.translate(-1.75,-.35,0),n.merge(l),l.translate(.35,-.35,0),n.merge(l),n.translate(0,0,.15),n.rotateY(-1.2),n.center();const g=new THREE.Mesh(n,e);g.castShadow=!0,s.add(g);const E=g.clone();E.translateOnAxis(new THREE.Vector3(1,0,-1).normalize(),.09),o.add(E);const d=new THREE.BoxGeometry(3,2.2,.2);d.translate(0,3,-16),r.merge(d);const v=new THREE.CylinderGeometry(.26,.26,.26,32);v.rotateZ(1.58),v.translate(1.4,.74,-16),r.merge(v),v.translate(-2.9,0,0),r.merge(v),r.rotateY(-1.2),r.center(),r.translate(.025,0,-.025);const y=new THREE.Mesh(r,gray);y.castShadow=!0,s.add(y);const w=y.clone();o.add(w),s.name=t+"-arrow1",s.position.set(-1,2.3,-16),scene.add(s),flaggers.push(s),o.name=t+"-arrow2",o.rotation.set(0,-.8,0),o.position.set(10,2.3,-16),scene.add(o),flaggers.push(o)}const end=[[],[],[],[],[],[],[]];function endArray(e,t){const r=end[e].indexOf(t.value);-1!==r&&end[e].splice(r,1),t.checked&&end[e].unshift(t.value)}function endSign(e,t){if(end[t].length<0)return;const r=new THREE.BoxGeometry(2.8,2.25,.1);r.rotateX(-1.6);const n=new THREE.BoxGeometry(3.2,3.2,.1);n.rotateX(-1.6);let a=25;0!==Math.abs(t%2)&&(a-=3),r.translate(a,.5,4*t-9.75);const s=new THREE.Mesh(r,endSignMaterial);n.translate(a,.48,4*t-10);const o=new THREE.Mesh(n,e);s.add(o),s.name="signGroup-"+t,s.castShadow=!0,scene.add(s)}const canv=renderer.domElement,rect=canv.getBoundingClientRect();let yHolder,currentHex=[],movingOn=!1;function onDocumentMouseDown(e){if(e.preventDefault(),hovered){const t=hovered.children,r=hovered.children[0].material;if(controls.enabled=!1,movingOn){mouse.x=(e.clientX-rect.left)/canv.clientWidth*2-1,mouse.y=-(e.clientY-rect.top)/canv.clientHeight*2+1,raycaster.setFromCamera(mouse,camera);const r=raycaster.intersectObject(objectPlane);r.length>0&&hovered.position.set(r[0].point.x,yHolder,r[0].point.z-3);let n=0;t.forEach(e=>{e.material=currentHex[n],n++}),currentHex=[],movingOn=!1,container.addEventListener("mousemove",onDocumentMouseMove,!1)}else container.removeEventListener("mousemove",onDocumentMouseMove,!1),movingOn=!0,yHolder=hovered.position.y,t.forEach(e=>{currentHex.push(e.material)}),glow.color.setHex(r.color.getHex()),t.forEach(e=>{e.material=glow}),hovered.position.set(hovered.position.x,hovered.position.y+1,hovered.position.z);render()}}function onDocumentTouchStart(e){e.preventDefault(),e=e.changedTouches[0],mouse.x=(e.clientX-rect.left)/canv.clientWidth*2-1,mouse.y=-(e.clientY-rect.top)/canv.clientHeight*2+1,raycaster.setFromCamera(mouse,camera);const t=raycaster.intersectObjects(flaggers),r=raycaster.intersectObject(objectPlane);if(t.length>0&&(controls.enabled=!1,hovered!==t[0].object&&(hovered=t[0].object)),hovered){const e=hovered.children,t=hovered.children[0].material;if(movingOn){r.length>0&&hovered.position.set(r[0].point.x,yHolder,r[0].point.z-3);let t=0;e.forEach(e=>{e.material=currentHex[t],t++}),currentHex=[],movingOn=!1,container.addEventListener("touchmove",onDocumentTouchMove,!1)}else container.removeEventListener("touchmove",onDocumentTouchMove,!1),movingOn=!0,yHolder=hovered.position.y,e.forEach(e=>{currentHex.push(e.material)}),glow.color.setHex(t.color.getHex()),e.forEach(e=>{e.material=glow}),hovered.position.set(hovered.position.x,hovered.position.y+1,hovered.position.z);render()}}function onDocumentMouseMove(e){e.preventDefault(),mouse.x=(e.clientX-rect.left)/canv.clientWidth*2-1,mouse.y=-(e.clientY-rect.top)/canv.clientHeight*2+1,raycaster.setFromCamera(mouse,camera);const t=raycaster.intersectObjects(flaggers);t.length>0?(hovered!==t[0].object&&(hovered=t[0].object),canv.style.cursor="pointer"):(hovered=null,canv.style.cursor="auto")}function onDocumentTouchMove(e){e.preventDefault(),e=e.changedTouches[0],mouse.x=(e.clientX-rect.left)/canv.clientWidth*2-1,mouse.y=-(e.clientY-rect.top)/canv.clientHeight*2+1,raycaster.setFromCamera(mouse,camera);const t=raycaster.intersectObject(objectPlane);selected&&t.length>0&&(selected.position.set(t[0].point.x,selected.position.y,t[0].point.z),render())}function onDocumentMouseCancel(e){e.preventDefault(),movingOn||(controls.enabled=!0,hovered=null,canv.style.cursor="auto")}function onDocumentTouchEnd(e){e.preventDefault(),movingOn||(controls.enabled=!0,hovered=null,canv.style.cursor="auto")}const clearCones=(e,t)=>{if(scene.getObjectByName(e+"-cones")&&scene.remove(scene.getObjectByName(e+"-cones")),scene.getObjectByName("signGroup-"+e)&&scene.remove(scene.getObjectByName("signGroup-"+e)),scene.getObjectByName(e+"-flagger1")&&scene.remove(scene.getObjectByName(e+"-flagger1")),scene.getObjectByName(e+"-flagger2")&&scene.remove(scene.getObjectByName(e+"-flagger2")),scene.getObjectByName(e+"-arrow1")&&scene.remove(scene.getObjectByName(e+"-arrow1")),scene.getObjectByName(e+"-arrow2")&&scene.remove(scene.getObjectByName(e+"-arrow2")),scene.getObjectByName("spacing-"+e)&&scene.remove(scene.getObjectByName("spacing-"+e)),scene.getObjectByName("signGroup-"+e)&&scene.remove(scene.getObjectByName("signGroup-"+e)),t){const t=document.getElementsByName("input-"+e);for(let e=0;e<t.length;e++)"checkbox"===t[e].type&&(t[e].checked=!1),"text"===t[e].type&&(t[e].value="");signs[e]=[],arrows[e]=[],end[e]=[],slide("group-"+e)}const r=[];for(let t=0;t<flaggers.length;t++)flaggers[t].name!==e+"-flagger1"&&flaggers[t].name!==e+"-flagger2"&&flaggers[t].name!==e+"-arrow1"&&flaggers[t].name!==e+"-arrow2"&&r.push(flaggers[t]);flaggers=r,render()},renderCones=(e,t)=>{clearCones(e,!1);const r=new THREE.Geometry,n=coneGeometry.clone(!0),a=stripeGeometry.clone(!0),s=new THREE.Geometry,o=new THREE.Geometry;let c;switch(e){case 1:c=-1;break;case 2:c=-1.5;break;case 3:c=-2;break;case 4:c=-2.5;break;case 5:c=-3;break;case 6:c=-3.5}const i=Number(document.getElementById("buffer-"+e).value)/50;n.translate(c,.75,-19),s.merge(n),a.translate(c,.75,-19),o.merge(a);let m=c;for(let e=c;e>=c-i;e-=2)n.translate(-2,0,0),s.merge(n),a.translate(-2,0,0),o.merge(a),m-=2;const l=Number(document.getElementById("upstream-"+e).value)/50;let g=Math.pow(l,2)+Math.pow(4.5,2),E=l/(g=Math.floor(Math.sqrt(g))/2),d=4.5/g,v=0;n.translate(-2,0,0),s.merge(n),a.translate(-2,0,0),o.merge(a);let y=(m-=2)-l;for(let e=m;e>y;e-=E)n.translate(-E,0,d),s.merge(n),a.translate(-E,0,d),o.merge(a),v+=d,m-=E;switch(signSpace(t,e),e){case 1:c=10;break;case 2:c=10.5;break;case 3:c=11;break;case 4:c=11.5;break;case 5:c=12;break;case 6:c=12.5}n.translate(Math.abs(m)+c,0,-v),s.merge(n),a.translate(Math.abs(m)+c,0,-v),o.merge(a),m=c;const w=Number(document.getElementById("downbuff-"+e).value)/50;if(w&&w>0)for(let e=c;e<=c+w;e+=2)n.translate(2,0,0),s.merge(n),a.translate(2,0,0),o.merge(a),m+=2;const u=Number(document.getElementById("downstream-"+e).value)/50;n.translate(2,0,0),s.merge(n),a.translate(2,0,0),o.merge(a),m+=2,g=Math.pow(u,2)+Math.pow(4.5,2),E=u/(g=Math.floor(Math.sqrt(g))/2),d=4.5/g,v=0,y=m+u;for(let e=m;e<y;e+=E)n.translate(E,0,d),s.merge(n),a.translate(E,0,d),o.merge(a),v+=d;const T=new THREE.Mesh(s,t);r.merge(s);const h=new THREE.Mesh(o,white);T.add(h),r.merge(o);const x=new THREE.Mesh(r,shadows);T.add(x),T.castShadow=!0,T.name=e+"-cones",scene.add(T),slide("group-"+e),flagger(e,t),arrowSign(t,e),endSign(t,e),render()};function signArray(e,t){const r=signs[e].indexOf(t.value);-1!==r&&signs[e].splice(r,1),t.checked&&signs[e].unshift(t.value)}function signText(e,t,r){if(r.length>0){const r=document.getElementById("sign-"+e).value;(new THREE.FontLoader).load("fonts/helvetiker_regular.typeface.json",n=>{const a=new THREE.TextGeometry(r,{font:n,size:2,height:.2,curveSegments:12,bevelEnabled:!1});a.rotateX(-1.6);const s=new THREE.Mesh(a,white);s.position.set(t+4,.5,4*e-9),s.name="spacing-"+e,scene.add(s),render()})}}function signSpace(e,t){const r=new THREE.Geometry,n=new THREE.Group;let a;const s=[e,workerSignMaterial,flaggerSignMaterial,leftSignMaterial,rightSignMaterial,prepareStopSignMaterial,oneLaneSignMaterial,machineAheadSignMaterial,workAheadSignMaterial,constSignMaterial,utilitySignMaterial,rLaneSignMaterial,menWorkSignMaterial,lLaneMaterial,fMenSignMaterial,flagAheadSignMaterial,closedSignMaterial,shadows],o=signs[t],c=new THREE.CylinderGeometry(2.8,2.8,.1,4),i=new THREE.CylinderGeometry(3.2,3.2,.1,4);let m,l=12.5;0!==Math.abs(t%2)&&(l-=3),c.rotateY(1.6),c.translate(l,.5,4*t-10),i.rotateY(1.6),i.translate(l,.48,4*t-10),signText(t,l,o);for(let e=0;e<o.length;e++){switch(o[e]){case"worker":m=1;break;case"flagger":m=2;break;case"left":m=3;break;case"right":m=4;break;case"stop":m=5;break;case"lane":m=6;break;case"machine":m=7;break;case"road":m=8;break;case"const":m=9;break;case"utility":m=10;break;case"rLane":m=11;break;case"men":m=12;break;case"lLane":m=13;break;case"flag":m=14;break;case"fAhead":m=15;break;case"laneAhead":m=16;break;default:m=6}a=new THREE.Mesh(c,s[m]),n.add(a),r.merge(i),c.translate(-6.5,0,0),i.translate(-6.5,0,0)}const g=new THREE.Mesh(r,e);n.add(g),n.castShadow=!0,n.name="signGroup-"+t,scene.add(n)}for(let e=1;e<=6;e++){switch(e){case 6:document.getElementById("place-"+e).addEventListener("click",()=>{renderCones(e,yellow)});break;case 5:document.getElementById("place-"+e).addEventListener("click",()=>{renderCones(e,orange)});break;case 4:document.getElementById("place-"+e).addEventListener("click",()=>{renderCones(e,green)});break;case 3:document.getElementById("place-"+e).addEventListener("click",()=>{renderCones(e,blue)});break;case 2:document.getElementById("place-"+e).addEventListener("click",()=>{renderCones(e,purple)});break;default:document.getElementById("place-"+e).addEventListener("click",()=>{renderCones(e,red)})}document.getElementById("button-group-"+e).addEventListener("click",()=>{slide("group-"+e)}),document.getElementById("clear-"+e).addEventListener("click",()=>{clearCones(e,!0)}),document.getElementById("option-"+e+"-arrowArray").addEventListener("change",()=>{arrowArray(e,document.getElementById("option-"+e+"-arrowArray"))}),document.getElementById("option-"+e+"-endArray").addEventListener("change",()=>{endArray(e,document.getElementById("option-"+e+"-endArray"))}),document.getElementById("sign-"+e+"-worker").addEventListener("change",()=>{signArray(e,document.getElementById("sign-"+e+"-worker"))}),document.getElementById("sign-"+e+"-flagger").addEventListener("change",()=>{signArray(e,document.getElementById("sign-"+e+"-flagger"))}),document.getElementById("sign-"+e+"-left").addEventListener("change",()=>{signArray(e,document.getElementById("sign-"+e+"-left"))}),document.getElementById("sign-"+e+"-right").addEventListener("change",()=>{signArray(e,document.getElementById("sign-"+e+"-right"))}),document.getElementById("sign-"+e+"-stop").addEventListener("change",()=>{signArray(e,document.getElementById("sign-"+e+"-stop"))}),document.getElementById("sign-"+e+"-lane").addEventListener("change",()=>{signArray(e,document.getElementById("sign-"+e+"-lane"))}),document.getElementById("sign-"+e+"-machine").addEventListener("change",()=>{signArray(e,document.getElementById("sign-"+e+"-machine"))}),document.getElementById("sign-"+e+"-road").addEventListener("change",()=>{signArray(e,document.getElementById("sign-"+e+"-road"))}),document.getElementById("sign-"+e+"-const").addEventListener("change",()=>{signArray(e,document.getElementById("sign-"+e+"-const"))}),document.getElementById("sign-"+e+"-utility").addEventListener("change",()=>{signArray(e,document.getElementById("sign-"+e+"-utility"))}),document.getElementById("sign-"+e+"-rLane").addEventListener("change",()=>{signArray(e,document.getElementById("sign-"+e+"-rLane"))}),document.getElementById("sign-"+e+"-men").addEventListener("change",()=>{signArray(e,document.getElementById("sign-"+e+"-men"))}),document.getElementById("sign-"+e+"-lLane").addEventListener("change",()=>{signArray(e,document.getElementById("sign-"+e+"-lLane"))}),document.getElementById("sign-"+e+"-flag").addEventListener("change",()=>{signArray(e,document.getElementById("sign-"+e+"-flag"))}),document.getElementById("sign-"+e+"-fAhead").addEventListener("change",()=>{signArray(e,document.getElementById("sign-"+e+"-fAhead"))}),document.getElementById("sign-"+e+"-laneAhead").addEventListener("change",()=>{signArray(e,document.getElementById("sign-"+e+"-laneAhead"))}),document.getElementById("sign-"+e).addEventListener("focus",()=>{focusChange(document.getElementById("sign-"+e))}),document.getElementById("sign-"+e).addEventListener("blur",()=>{focusStop(document.getElementById("sign-"+e))}),document.getElementById("upstream-"+e).addEventListener("focus",()=>{focusChange(document.getElementById("upstream-"+e))}),document.getElementById("upstream-"+e).addEventListener("blur",()=>{focusStop(document.getElementById("upstream-"+e))}),document.getElementById("buffer-"+e).addEventListener("focus",()=>{focusChange(document.getElementById("buffer-"+e))}),document.getElementById("buffer-"+e).addEventListener("blur",()=>{focusStop(document.getElementById("buffer-"+e))}),document.getElementById("downbuff-"+e).addEventListener("focus",()=>{focusChange(document.getElementById("downbuff-"+e))}),document.getElementById("downbuff-"+e).addEventListener("blur",()=>{focusStop(document.getElementById("downbuff-"+e))}),document.getElementById("downstream-"+e).addEventListener("focus",()=>{focusChange(document.getElementById("downstream-"+e))}),document.getElementById("downstream-"+e).addEventListener("blur",()=>{focusStop(document.getElementById("downstream-"+e))})}