let scene,camera,controls,renderer,ambient,sun,objectPlane,gpuPicker,flaggers=[];const container=document.getElementById("container"),raycaster=new THREE.Raycaster,mouse=new THREE.Vector2,plane=new THREE.Plane,offset=new THREE.Vector3,intersection=new THREE.Vector3;let selected=null,dragged=null,hovered=null,testPoint=null;const glow=new THREE.MeshLambertMaterial({color:12029393,emissive:3355443}),red=new THREE.MeshLambertMaterial({color:13722210}),green=new THREE.MeshLambertMaterial({color:6072442}),blue=new THREE.MeshLambertMaterial({color:1678785}),orange=new THREE.MeshLambertMaterial({color:14720280}),yellow=new THREE.MeshLambertMaterial({color:13875712}),purple=new THREE.MeshLambertMaterial({color:12029393}),white=new THREE.MeshLambertMaterial({color:16777215}),gray=new THREE.MeshLambertMaterial({color:5592405}),palegray=new THREE.MeshLambertMaterial({color:8881006}),shadows=new THREE.ShadowMaterial({opacity:.3}),windowColor=new THREE.MeshLambertMaterial({color:13688291,transparent:!0,opacity:.5}),clickBoxMaterial=new THREE.MeshLambertMaterial({color:13688291,transparent:!0,opacity:0}),truckMaterial=new THREE.MeshLambertMaterial({color:15697223}),skinTone1=new THREE.MeshLambertMaterial({color:9262372}),skinTone2=new THREE.MeshLambertMaterial({color:13010498}),skinTone3=new THREE.MeshLambertMaterial({color:15843965}),skinTone4=new THREE.MeshLambertMaterial({color:16767916}),workerSign=(new THREE.TextureLoader).load("images/sign-01.png"),workerSignMaterial=new THREE.MeshBasicMaterial({map:workerSign}),flaggerSign=(new THREE.TextureLoader).load("images/sign-02.png"),flaggerSignMaterial=new THREE.MeshBasicMaterial({map:flaggerSign}),leftSign=(new THREE.TextureLoader).load("images/sign-03.png"),leftSignMaterial=new THREE.MeshBasicMaterial({map:leftSign}),rightSign=(new THREE.TextureLoader).load("images/sign-04.png"),rightSignMaterial=new THREE.MeshBasicMaterial({map:rightSign}),prepareStopSign=(new THREE.TextureLoader).load("images/sign-05.png"),prepareStopSignMaterial=new THREE.MeshBasicMaterial({map:prepareStopSign}),oneLaneSign=(new THREE.TextureLoader).load("images/sign-06.png"),oneLaneSignMaterial=new THREE.MeshBasicMaterial({map:oneLaneSign}),machineAheadSign=(new THREE.TextureLoader).load("images/sign-07.png"),machineAheadSignMaterial=new THREE.MeshBasicMaterial({map:machineAheadSign}),workAheadSign=(new THREE.TextureLoader).load("images/sign-08.png"),workAheadSignMaterial=new THREE.MeshBasicMaterial({map:workAheadSign}),constSign=(new THREE.TextureLoader).load("images/sign-09.png"),constSignMaterial=new THREE.MeshBasicMaterial({map:constSign}),utilitySign=(new THREE.TextureLoader).load("images/sign-10.png"),utilitySignMaterial=new THREE.MeshBasicMaterial({map:utilitySign}),rLaneSign=(new THREE.TextureLoader).load("images/sign-11.png"),rLaneSignMaterial=new THREE.MeshBasicMaterial({map:rLaneSign}),menWorkSign=(new THREE.TextureLoader).load("images/sign-12.png"),menWorkSignMaterial=new THREE.MeshBasicMaterial({map:menWorkSign}),lLaneSign=(new THREE.TextureLoader).load("images/sign-13.png"),lLaneMaterial=new THREE.MeshBasicMaterial({map:lLaneSign}),fMenSign=(new THREE.TextureLoader).load("images/sign-14.png"),fMenSignMaterial=new THREE.MeshBasicMaterial({map:fMenSign}),flagAheadSign=(new THREE.TextureLoader).load("images/sign-15.png"),flagAheadSignMaterial=new THREE.MeshBasicMaterial({map:flagAheadSign}),closedSign=(new THREE.TextureLoader).load("images/sign-16.png"),closedSignMaterial=new THREE.MeshBasicMaterial({map:closedSign}),endWorkSign=(new THREE.TextureLoader).load("images/sign-17.png"),endSignMaterial=new THREE.MeshBasicMaterial({map:endWorkSign}),coneGeometry=new THREE.CylinderGeometry(.07,.2,.5,32,.8,!1,.8),coneBottomG=new THREE.BoxGeometry(.5,.06,.5);coneBottomG.translate(0,-.23,0),coneGeometry.merge(coneBottomG),coneGeometry.scale(1.5,1.5,1.5),coneGeometry.translate(0,.125,0);const stripeGeometry=new THREE.CylinderGeometry(.116,.155,.15,32,1,!1,.8);stripeGeometry.scale(1.5,1.5,1.5),stripeGeometry.translate(0,.125,0);let showing="none";function slide(e){"none"!==showing&&(document.getElementById(showing).style.top="-535px"),"none"!==showing&&document.getElementById("button-"+showing).classList.remove("selected"),showing===e?showing="none":(document.getElementById("button-"+e).classList.add("selected"),document.getElementById(e).style.top="100px",showing=e)}function init(){scene=new THREE.Scene,window.scene=scene,window.THREE=THREE,initRoad(),initBackHoe(),initTruck(),initWorkers(),initCamera(),initLights(),initRender()}function initCamera(){(camera=new THREE.PerspectiveCamera(60,window.innerWidth/(window.innerHeight-100),1,100)).position.set(0,45,25)}function initLights(){ambient=new THREE.HemisphereLight(14610162,6708333,.9),(sun=new THREE.SpotLight(16571508,.2)).position.set(-50,40,-5),sun.castShadow=!0,sun.shadow.camera.left=-10,sun.shadow.camera.right=10,sun.shadow.camera.top=10,sun.shadow.camera.bottom=-10,sun.shadow.camera.near=.1,sun.shadow.camera.far=1e3,sun.shadow.mapSize.width=2048,sun.shadow.mapSize.height=2048,scene.add(ambient),scene.add(sun)}function initRender(){(renderer=new THREE.WebGLRenderer({antialias:!0})).setSize(window.innerWidth,window.innerHeight-100),renderer.setClearColor(13498879,1),renderer.setPixelRatio(window.devicePixelRatio),renderer.shadowMap.enabled=!0,renderer.shadowMap.type=THREE.PCFSoftShadowMap,container.appendChild(renderer.domElement),(controls=new THREE.OrbitControls(camera,renderer.domElement)).addEventListener("change",render),container.addEventListener("mousemove",onDocumentMouseMove,!1),container.addEventListener("mouseup",onDocumentMouseCancel,!1),container.addEventListener("mousedown",onDocumentMouseDown,!1),container.addEventListener("touchmove",onDocumentTouchMove,!1),container.addEventListener("touchstart",onDocumentTouchStart,!1),container.addEventListener("touchend",onDocumentTouchEnd,!1)}function initBackHoe(){const e=new THREE.Geometry,t=new THREE.Geometry,r=new THREE.Geometry,n=new THREE.BoxGeometry(4,.5,1.2);n.translate(.75,.25,-.5),e.merge(n);const a=new THREE.BoxGeometry(.5,.5,1.2);a.translate(-1,1,-.5),a.vertices[4].y-=.5,a.vertices[5].y-=.5,e.merge(a);const s=new THREE.BoxGeometry(.25,.5,1.2);s.translate(-.63,1,-.5),e.merge(s);const o=new THREE.BoxGeometry(2.5,.25,1.2);o.translate(0,.625,-.5),e.merge(o);const c=new THREE.BoxGeometry(1.9,.1,1.3);c.translate(.4,2.3,-.5),e.merge(c);const i=new THREE.BoxGeometry(.75,.5,.25);i.translate(2.55,.25,.25),i.vertices[4].x-=.5,i.vertices[5].x-=.5,i.vertices[0].y+=.55,i.vertices[1].y+=.55,i.vertices[0].x-=.4,i.vertices[1].x-=.4,i.vertices[2].y+=1,i.vertices[3].y+=1,i.vertices[6].y+=.5,i.vertices[7].y+=.5,i.vertices[6].x+=.2,i.vertices[7].x+=.2,e.merge(i),i.translate(0,0,-1.5),e.merge(i);const l=new THREE.BoxGeometry(1,.25,.3);l.translate(3.025,1.18,.25),l.vertices[4].x+=.35,l.vertices[5].x+=.35,l.vertices[0].y-=.3,l.vertices[1].y-=.3,l.vertices[2].y-=.5,l.vertices[3].y-=.5,e.merge(l),l.translate(0,0,-1.5),e.merge(l);const m=new THREE.BoxGeometry(.75,.45,.3);m.translate(3.9,.78,.25),m.vertices[0].y-=.5,m.vertices[1].y-=.5,m.vertices[0].x+=.2,m.vertices[1].x+=.2,m.vertices[2].y-=.5,m.vertices[3].y-=.5,e.merge(m),m.translate(0,0,-1.5),e.merge(m);const E=new THREE.TorusGeometry(.34,.1,4,50,6.3);E.translate(-.25,-.213,.415),e.merge(E),E.translate(0,0,-1.825),e.merge(E),E.translate(3.2,0,0),e.merge(E),E.translate(0,0,1.825),e.merge(E);const g=new THREE.CylinderGeometry(.5,.5,.3,32);g.translate(-.25,.2,.25),g.rotateX(1.6),e.merge(g),g.translate(0,0,-1.3),e.merge(g),g.translate(3.25,0,0),e.merge(g),g.translate(0,0,1.3),e.merge(g);const v=new THREE.Mesh(e,truckMaterial);r.merge(e);const d=new THREE.BoxGeometry(2.75,1.75,1.125);d.translate(.94,1.375,-.5),d.vertices[0].x-=1.1,d.vertices[1].x-=1.1,d.vertices[3].y+=.15,d.vertices[2].y+=.15;const w=new THREE.Mesh(d,windowColor);v.add(w),r.merge(d);let y=new THREE.BoxGeometry(.1,1.5,.1);y.translate(-.45,1.5,.05),t.merge(y),y.translate(.55,0,0),t.merge(y),y.translate(0,0,-1.1),t.merge(y),y.translate(-.55,0,0),t.merge(y),(y=new THREE.BoxGeometry(.05,1.5,.1)).translate(1.23,1.5,.05),t.merge(y),y.translate(0,0,-1.1),t.merge(y);const T=new THREE.BoxGeometry(.05,1.75,.1);T.translate(1.28,1.375,.05),T.vertices[0].y-=.05,T.vertices[1].y-=.05,t.merge(T),T.translate(0,0,-1.1),t.merge(T);const H=new THREE.BoxGeometry(.1,.25,.1);H.translate(2.3,.625,.05),H.vertices[0].y-=.05,H.vertices[1].y-=.05,t.merge(H),H.translate(0,0,-1.1),t.merge(H);let x=new THREE.BoxGeometry(1.75,.1,.1);x.translate(.375,2.2,.05),t.merge(x),x.translate(0,0,-1.1),t.merge(x),(x=new THREE.BoxGeometry(1,.1,.1)).translate(1.75,.55,.05),t.merge(x),x.translate(0,0,-1.1),t.merge(x),(x=new THREE.BoxGeometry(1.75,.5,.1)).translate(.4,1,.05),t.merge(x),x.translate(0,0,-1.1),t.merge(x);const R=new THREE.BoxGeometry(.01,.2,1);R.translate(-.496,1.3,-.5),t.merge(R),R.translate(0,.9,0),t.merge(R);const h=new THREE.BoxGeometry(1.045,.1,.1);h.translate(1.825,2.155,.05),h.vertices[0].y-=1.5,h.vertices[1].y-=1.5,h.vertices[2].y-=1.5,h.vertices[3].y-=1.5,t.merge(h),h.translate(0,0,-1.1),t.merge(h);const u=new THREE.BoxGeometry(.1,.1,1);u.translate(2.3,.55,-.5),t.merge(u);const M=new THREE.BoxGeometry(.4,.1,.4);M.translate(.7,.75,-.5),t.merge(M);const G=new THREE.BoxGeometry(.1,.7,.4);G.translate(.45,1.05,-.5),t.merge(G);const p=new THREE.CylinderGeometry(.2,.2,.05,32);p.translate(1.5,-.75,-.5),p.rotateZ(1.2),t.merge(p);const z=new THREE.BoxGeometry(.95,.24,.98);z.translate(1.75,.65,-.5),t.merge(z);const B=new THREE.BoxGeometry(.95,.5,.98);B.translate(1.75,1,-.5),B.vertices[0].x-=.4,B.vertices[1].x-=.4,t.merge(B);const f=new THREE.Shape;f.moveTo(0,.75),f.bezierCurveTo(0,1.75,1.5,1.75,1.5,.75),f.lineTo(1.125,.75001),f.bezierCurveTo(1.125,1.25,.375,1.25,.375,.75),f.bezierCurveTo(.375,.35,1.125,.35,1.125,.75),f.lineTo(1.5,.75001),f.bezierCurveTo(1.5,-.125,0,-.125,0,.75);const S=new THREE.ExtrudeGeometry(f,{amount:.5,steps:50,bevelEnabled:!1,curveSegments:8});S.translate(-1,-1,0),t.merge(S),S.translate(0,0,-1.5),t.merge(S),S.translate(3.2,0,0),t.merge(S),S.translate(0,0,1.5),t.merge(S);const b=new THREE.CylinderGeometry(.15,.15,.3,6);b.rotateX(1.6),b.translate(-.25,-.2,.3),t.merge(b),b.translate(0,0,-1.5),t.merge(b),b.translate(3.2,0,0),t.merge(b),b.translate(0,0,1.5),t.merge(b);let k=new THREE.BoxGeometry(.2,.2,1.5);k.translate(-1.25,0,-.5),t.merge(k),(k=new THREE.BoxGeometry(.32,.2,1.5)).translate(-1.19,-.2,-.5),t.merge(k),(k=new THREE.BoxGeometry(1.25,.2,1.5)).translate(1.25,-.2,-.5),t.merge(k),(k=new THREE.BoxGeometry(.2,.2,.9)).translate(2.75,-.2,-.45),t.merge(k);const L=new THREE.BoxGeometry(.05,.2,.5);L.translate(-1.25,.3,-.5),t.merge(L);let C=new THREE.BoxGeometry(.5,.2,2);C.rotateZ(.2),C.translate(4.825,.7,-.5),t.merge(C),(C=new THREE.BoxGeometry(1,.2,2)).rotateZ(1.15),C.translate(4.45,.25,-.5),t.merge(C),(C=new THREE.BoxGeometry(1,.2,2)).rotateZ(-.7),C.translate(4.61,-.42,-.5),t.merge(C),(C=new THREE.BoxGeometry(.75,.2,2)).translate(5.3,-.717,-.5),t.merge(C),(C=new THREE.BoxGeometry(.5,.25,.2)).translate(4.839,.53,.4),C.vertices[6].y+=.2,C.vertices[7].y+=.2,C.vertices[2].y+=.1,C.vertices[3].y+=.1,C.vertices[2].x-=.15,C.vertices[3].x-=.15,t.merge(C),C.translate(0,0,-1.8),t.merge(C),(C=new THREE.BoxGeometry(.75,.25,.2)).translate(5.3,-.5,.4),C.vertices[4].x+=.2,C.vertices[5].x+=.2,C.vertices[0].y-=.2,C.vertices[1].y-=.2,t.merge(C),C.translate(0,0,-1.8),t.merge(C),(C=new THREE.BoxGeometry(.75,.75,.2)).translate(4.75,.25,.4),C.vertices[2].x+=.1,C.vertices[3].x+=.1,C.vertices[4].x+=.2,C.vertices[5].x+=.2,C.vertices[0].x-=.23,C.vertices[1].x-=.23,C.vertices[0].y+=.02,C.vertices[1].y+=.02,t.merge(C),C.translate(0,0,-1.8),t.merge(C),(C=new THREE.BoxGeometry(.5,.5,.2)).translate(4.875,-.375,.4),C.vertices[0].x+=.1,C.vertices[1].x+=.1,C.vertices[2].x+=.3,C.vertices[3].x+=.3,C.vertices[4].x-=.25,C.vertices[5].x-=.25,C.vertices[6].x+=.05,C.vertices[7].x+=.05,C.vertices[6].y+=.05,C.vertices[7].y+=.05,t.merge(C),C.translate(0,0,-1.8),t.merge(C);const Y=new THREE.Mesh(t,gray);v.add(Y),r.merge(t);const O=new THREE.Mesh(r,shadows);v.add(O),v.castShadow=!0,v.position.set(2.5,1.4,-15),scene.add(v)}function flagger(e,t){const r=new THREE.Geometry,n=new THREE.Geometry,a=new THREE.Geometry,s=new THREE.Geometry,o=new THREE.Geometry,c=new THREE.Geometry,i=new THREE.BoxGeometry(1.7,2,1);i.rotateY(-.5),i.center(),i.translate(.05,0,0);const l=new THREE.Mesh(i,clickBoxMaterial),m=new THREE.BoxGeometry(1,1.4,.8);m.translate(0,.1,0),m.vertices[0].z-=.15,m.vertices[0].x-=.15,m.vertices[1].z+=.15,m.vertices[1].x-=.15,m.vertices[4].z+=.15,m.vertices[4].x+=.15,m.vertices[5].z-=.15,m.vertices[5].x+=.15,m.rotateY(-.5),m.translate(.45,0,.7),m.scale(.5,.5,.5),s.merge(m);const E=new THREE.SphereGeometry(.2,32,32,1,6.3,0,1.5);E.translate(0,.7,0);const g=new THREE.CylinderGeometry(.2,.2,.02,32);g.translate(0,.72,.1),E.merge(g),E.rotateY(-.5),E.translate(.225,0,.345),s.merge(E);const v=new THREE.CylinderGeometry(.4,.4,.1,8);v.translate(.75,.25,-.55),v.rotateZ(1.25),v.rotateY(.75),v.rotateX(.5),s.merge(v),s.center(),s.translate(0,.2,0);const d=new THREE.Mesh(s,t);d.castShadow=!0,c.merge(s),l.add(d);const w=new THREE.BoxGeometry(.2,.5,.4);w.translate(-.13,.17,0),w.vertices[0].z-=.05,w.vertices[1].z+=.05,w.vertices[4].z+=.05,w.vertices[4].x+=.05,w.vertices[5].z-=.05,w.vertices[5].x+=.05,r.merge(w);const y=new THREE.BoxGeometry(.2,.5,.4);y.translate(.13,.17,0),y.vertices[5].z-=.05,y.vertices[4].z+=.05,y.vertices[1].z+=.05,y.vertices[1].x-=.05,y.vertices[0].z-=.05,y.vertices[0].x-=.05,r.merge(y);const T=new THREE.BoxGeometry(.2,.5,.025);T.translate(0,.17,-.1875),T.vertices[0].z+=.05,T.vertices[1].z+=.05,T.vertices[4].z+=.05,T.vertices[5].z+=.05,r.merge(T),r.rotateY(-.5),r.center(),r.translate(.295,-.12,.165);const H=new THREE.Mesh(r,orange);H.castShadow=!0,c.merge(r),l.add(H);let x=new THREE.BoxGeometry(.05,.5,.001);x.translate(-.11,.17,.201),x.vertices[0].z-=.05,x.vertices[1].z-=.05,x.vertices[4].z-=.05,x.vertices[5].z-=.05,n.merge(x),x.translate(.22,0,0),n.merge(x),(x=new THREE.BoxGeometry(.05,.5,.001)).translate(-.11,.17,-.201),x.vertices[0].z+=.05,x.vertices[1].z+=.05,x.vertices[4].z+=.05,x.vertices[5].z+=.05,n.merge(x),x.translate(.22,0,0),n.merge(x),(x=new THREE.BoxGeometry(.05,.001,.3)).translate(-.11,.42,0),n.merge(x),x.translate(.22,0,0),n.merge(x),(x=new THREE.BoxGeometry(.2,.2,.001)).translate(-.13,.02,.201),x.vertices[4].x+=.02,x.vertices[5].x+=.02,x.vertices[0].z-=.02,x.vertices[1].z-=.02,x.vertices[4].z-=.02,x.vertices[5].z-=.02,n.merge(x),(x=new THREE.BoxGeometry(.2,.2,.001)).translate(.13,.02,.201),x.vertices[0].x-=.02,x.vertices[1].x-=.02,x.vertices[0].z-=.02,x.vertices[1].z-=.02,x.vertices[4].z-=.02,x.vertices[5].z-=.02,n.merge(x),(x=new THREE.BoxGeometry(.001,.2,.4)).translate(-.23,.02,0),x.vertices[0].x+=.02,x.vertices[1].x+=.02,x.vertices[4].x+=.02,x.vertices[5].x+=.02,x.vertices[0].z-=.02,x.vertices[1].z+=.02,x.vertices[4].z+=.02,x.vertices[5].z-=.02,n.merge(x),(x=new THREE.BoxGeometry(.001,.2,.4)).translate(.23,.02,0),x.vertices[0].x-=.02,x.vertices[1].x-=.02,x.vertices[4].x-=.02,x.vertices[5].x-=.02,x.vertices[0].z-=.02,x.vertices[1].z+=.02,x.vertices[4].z+=.02,x.vertices[5].z-=.02,n.merge(x),(x=new THREE.BoxGeometry(.45,.2,.001)).translate(0,.02,-.201),x.vertices[0].x-=.02,x.vertices[1].x-=.02,x.vertices[4].x+=.02,x.vertices[5].x+=.02,x.vertices[0].z+=.02,x.vertices[1].z+=.02,x.vertices[4].z+=.02,x.vertices[5].z+=.02,n.merge(x),n.rotateY(-.5),n.center(),n.translate(.295,-.12,.165);const R=new THREE.Mesh(n,yellow);c.merge(n),l.add(R);const h=new THREE.BoxGeometry(.5,.8,.8);h.translate(-.25,-1,0),h.vertices[0].x-=.1,h.vertices[1].x-=.1,h.vertices[2].x-=.3,h.vertices[2].z-=.3,h.vertices[3].x-=.3,h.vertices[3].z+=.3,h.vertices[6].z+=.3,h.vertices[7].z-=.3,a.merge(h);const u=new THREE.BoxGeometry(.5,.8,.8);u.translate(.25,-1,0),u.vertices[4].x+=.1,u.vertices[5].x+=.1,u.vertices[2].z-=.3,u.vertices[3].z+=.3,u.vertices[6].x+=.3,u.vertices[6].z+=.3,u.vertices[7].x+=.3,u.vertices[7].z-=.3,a.merge(u),a.rotateY(-.5),a.scale(.5,.5,.5),a.center(),a.translate(.295,-.78,.165);const M=new THREE.Mesh(a,blue);H.castShadow=!0,c.merge(a),l.add(M);const G=new THREE.BoxGeometry(.5,.4,.5);G.translate(.64,.6,0),G.vertices[0].y-=.1,G.vertices[0].z+=.1,G.vertices[0].x-=.2,G.vertices[1].y-=.08,G.vertices[1].z+=.3,G.vertices[1].x-=.1,G.vertices[2].z+=.1,G.vertices[2].x-=.05,G.vertices[2].y+=.1,G.vertices[3].y+=.2,G.vertices[3].z+=.4,G.vertices[3].x+=.2,G.vertices[4].x-=.04,G.vertices[5].x-=.04,o.merge(G);const p=new THREE.BoxGeometry(.5,.3,.3);p.translate(1.14,.6,.3),p.vertices[0].y+=.25,p.vertices[0].z-=.1,p.vertices[0].x-=.65,p.vertices[1].y+=.25,p.vertices[1].z+=.05,p.vertices[1].x-=.5,p.vertices[2].y+=.55,p.vertices[2].z-=.05,p.vertices[2].x-=.55,p.vertices[3].y+=.55,p.vertices[3].z+=.1,p.vertices[3].x-=.4,p.vertices[4].x-=.1,p.vertices[4].z-=.1,p.vertices[4].y-=.03,p.vertices[5].y-=.05,p.vertices[5].z-=.1,p.vertices[5].x-=.2,p.vertices[6].x+=.2,p.vertices[6].y+=.15,p.vertices[6].z+=0,p.vertices[7].x-=.05,p.vertices[7].z-=.1,p.vertices[7].y+=.05,o.merge(p);const z=new THREE.BoxGeometry(1,.4,.5);z.translate(-.85,.6,0),z.vertices[5].y-=.8,z.vertices[5].z-=.1,z.vertices[4].y-=.8,z.vertices[4].z+=.1,z.vertices[7].y-=.5,z.vertices[7].z-=.1,z.vertices[6].y-=.5,z.vertices[6].z+=.1,z.vertices[3].x-=.04,z.vertices[2].x-=.04,o.merge(z);const B=new THREE.SphereGeometry(.35,32,32);B.translate(0,1.3,0),o.merge(B),o.rotateY(-.5),o.scale(.5,.5,.5),o.center(),o.translate(.215,.11,.155);let f=~~(3*Math.random());const S=[skinTone1,skinTone2,skinTone3,skinTone4],b=new THREE.Mesh(o,S[f]);c.merge(o),l.add(b);const k=new THREE.CylinderGeometry(.05,.05,2.4,32);k.scale(.5,.5,.5),k.center(),k.translate(-.3,-.3,-.15);const L=new THREE.Mesh(k,gray);c.merge(k),l.add(L);const C=new THREE.Mesh(c,shadows);l.add(C),l.position.set(-6,1.48,-12),l.name=e+"-flagger1",scene.add(l),flaggers.push(l);const Y=l.clone(!0);Y.rotation.set(0,2.4,0),Y.position.set(10,1.48,-28),Y.name=e+"-flagger2",scene.add(Y),flaggers.push(Y)}function initRoad(){const e=new THREE.Geometry,t=new THREE.Geometry,r=new THREE.Geometry,n=new THREE.Geometry,a=(new THREE.Geometry,new THREE.Geometry),s=new THREE.BoxGeometry(155,1,38);s.translate(0,0,-45.5),e.merge(s),s.translate(0,0,51),e.merge(s);const o=new THREE.Mesh(e,green);n.merge(e);const c=new THREE.BoxGeometry(155,1,13);c.translate(0,0,-20);const i=new THREE.Mesh(c,gray);o.add(i),n.merge(c);const l=new THREE.BoxGeometry(1,.1,.2);l.translate(-75,.5,-20),t.merge(l);for(let e=75;e>=-73;e-=2)l.translate(2,0,0),t.merge(l);const m=new THREE.Mesh(t,yellow);o.add(m);const E=coneGeometry.clone(!0),g=stripeGeometry.clone(!0);E.translate(-40,.75,-19),a.merge(E),g.translate(-40,.75,-19),r.merge(g);for(let e=1.5;e<=80;e+=2)E.translate(2,0,0),a.merge(E),g.translate(2,0,0),r.merge(g);const v=new THREE.Mesh(a,truckMaterial);o.add(v);const d=new THREE.BoxGeometry(155,.01,.1);d.translate(0,.5,-26),r.merge(d),d.translate(0,0,12),r.merge(d);const w=new THREE.Mesh(r,white);o.add(w);const y=new THREE.Mesh(n,shadows);y.position.set(0,3e-4,-13.8),y.receiveShadow=!0,scene.add(y),objectPlane=y,o.castShadow=!0,scene.add(o)}function initTruck(){const e=new THREE.Geometry,t=new THREE.Geometry,r=new THREE.Geometry,n=new THREE.Geometry,a=new THREE.Geometry,s=new THREE.BoxGeometry(1,.8,1.3);s.translate(-.6,0,0),e.merge(s);const o=new THREE.BoxGeometry(.1,.8,1.3);o.translate(.52,.25,0),e.merge(o);const c=new THREE.BoxGeometry(.1,.7,.3);c.translate(.52,.85,.5),e.merge(c),c.translate(0,0,-1),e.merge(c);const i=new THREE.BoxGeometry(.8,.1,1.3);i.translate(.17,1.15,0),i.vertices[6].x-=.05,i.vertices[7].x-=.05,e.merge(i);const l=new THREE.BoxGeometry(.1,1,.1);l.translate(-.6,.52,-.6),l.rotateZ(-.4),e.merge(l),l.translate(0,0,1.2),e.merge(l);const m=new THREE.BoxGeometry(3.2,.3,1.3);m.translate(.9,-.31,0),e.merge(m);const E=new THREE.BoxGeometry(2.68,.6,.1);E.translate(1.15,.1,.6),e.merge(E),E.translate(0,0,-1.2),e.merge(E);const g=new THREE.BoxGeometry(.1,.6,1.3);g.translate(2.45,.1,0),e.merge(g),e.translate(0,1.5,0);const v=new THREE.TorusGeometry(.25,.1,3,199);v.translate(-.3,1.09,.63),e.merge(v),v.translate(0,0,-1.3),e.merge(v),v.translate(2,0,1.3),e.merge(v),v.translate(0,0,-1.3),e.merge(v);const d=new THREE.Mesh(e,white);a.merge(e);const w=new THREE.BoxGeometry(1,.8,1.29);w.vertices[4].x+=.26,w.vertices[5].x+=.26,w.vertices[6].x-=.035,w.vertices[7].x-=.035,w.vertices[0].y+=2.2,w.vertices[1].y+=2.2,w.vertices[2].y+=2.3,w.vertices[3].y+=2.3,w.vertices[4].y+=2.2,w.vertices[5].y+=2.2,w.vertices[6].y+=2.3,w.vertices[7].y+=2.3;const y=new THREE.Mesh(w,windowColor);d.add(y);const T=new THREE.BoxGeometry(.4,.1,.4);T.translate(.25,1.6,.3),r.merge(T),T.translate(0,0,-.6),r.merge(T);const H=new THREE.BoxGeometry(.1,.7,.4);H.translate(.45,1.8,.3),r.merge(H),H.translate(0,0,-.6),r.merge(H);const x=new THREE.CylinderGeometry(.2,.2,.05,32);x.translate(-1.9,.65,.3),x.rotateZ(-1.2),r.merge(x);const R=new THREE.CylinderGeometry(.45,.45,.2,32);R.translate(-.3,.55,-1.1),R.rotateX(1.6),r.merge(R),R.translate(0,0,-1.2),r.merge(R),R.translate(2,0,1.2),r.merge(R),R.translate(0,0,-1.2),r.merge(R);const h=new THREE.BoxGeometry(.01,.7,1.2);h.translate(-1.1,1.5,0),r.merge(h);const u=new THREE.BoxGeometry(.05,.2,.5);u.translate(2.5,1.25,0),r.merge(u);const M=new THREE.Mesh(r,gray);d.add(M),a.merge(r);const G=new THREE.BoxGeometry(.4,.1,1.4);G.translate(-.95,1.05,0),G.vertices[2].x+=.01,G.vertices[3].x+=.01,t.merge(G);const p=new THREE.BoxGeometry(1.1,.1,1.4);p.translate(.7,1.05,0),p.vertices[2].x+=.01,p.vertices[3].x+=.01,p.vertices[6].x-=.01,p.vertices[7].x-=.01,t.merge(p);const z=new THREE.BoxGeometry(.4,.1,1.4);z.translate(2.35,1.05,0),z.vertices[6].x-=.01,z.vertices[7].x-=.01,t.merge(z);const B=new THREE.Mesh(t,palegray);d.add(B),a.merge(t);const f=new THREE.BoxGeometry(.1,.1,.1);f.translate(2.5,1.25,.45),n.merge(f),f.translate(0,0,-.9),n.merge(f);const S=new THREE.BoxGeometry(.1,.05,.5);S.translate(.2,2.72,0),n.merge(S);const b=new THREE.Mesh(n,orange);d.add(b),a.merge(n);const k=new THREE.Mesh(a,shadows);d.add(k),d.rotation.set(0,.5,0),d.scale.set(.9,.9,.9),d.castShadow=!0,d.position.set(-2.5,0,-10),scene.add(d)}function initWorkers(){const e=new THREE.Geometry,t=new THREE.Geometry,r=new THREE.Geometry,n=new THREE.Geometry,a=new THREE.Geometry,s=new THREE.Geometry,o=new THREE.Geometry,c=new THREE.Geometry,i=[skinTone1,skinTone2,skinTone3,skinTone4];let l=new THREE.BoxGeometry(1,.4,.5);l.translate(3.55,1.8,6.5),l.vertices[0].y-=.75,l.vertices[1].y-=.75,l.vertices[2].y-=.5,l.vertices[3].y-=.5,l.vertices[0].x-=.5,l.vertices[1].x-=.5,l.vertices[2].x-=.5,l.vertices[3].x-=.5,l.vertices[0].z-=.15,l.vertices[1].z+=.15,l.vertices[2].z-=.15,l.vertices[3].z+=.15,l.rotateY(-1),e.merge(l);let m=new THREE.BoxGeometry(1,.4,.5);m.translate(1.85,1.8,6.5),m.vertices[5].y+=.3,m.vertices[4].y+=.3,m.vertices[7].y+=.55,m.vertices[6].y+=.55,m.vertices[5].x+=.8,m.vertices[4].x+=.8,m.vertices[7].x+=.8,m.vertices[6].x+=.8,m.vertices[5].z+=.9,m.vertices[4].z+=1.05,m.vertices[7].z+=.9,m.vertices[6].z+=1.05,m.rotateY(-1),e.merge(m);const E=new THREE.SphereGeometry(.35,32,32);E.translate(2.7,2.5,6.5),E.rotateY(-1),e.merge(E),e.scale(.5,.5,.5),e.translate(4.55,.6,3.5);let g=~~(3*Math.random());const v=new THREE.Mesh(e,i[g]);c.merge(e),l.rotateY(1.5),l.translate(-5.4,.1,.35),t.merge(l),E.translate(4.1,0,-1),t.merge(E),(m=new THREE.BoxGeometry(1,.4,.5)).translate(-.85,.6,0),m.vertices[4].y-=.75,m.vertices[5].y-=.75,m.vertices[6].y-=.5,m.vertices[7].y-=.5,m.vertices[0].x+=.05,m.vertices[1].x+=.05,m.vertices[4].x+=.5,m.vertices[5].x+=.5,m.vertices[6].x+=.5,m.vertices[7].x+=.5,m.vertices[4].z+=.15,m.vertices[5].z-=.15,m.vertices[6].z+=.15,m.vertices[7].z-=.15,m.rotateY(.5),m.translate(.065,1.3,4.79),t.merge(m),t.scale(.5,.5,.5),t.translate(4.52,.55,3.52),g=~~(3*Math.random());const d=new THREE.Mesh(t,i[g]);v.add(d),c.merge(t),(l=new THREE.BoxGeometry(1,.4,.5)).translate(.85,1.8,0),l.vertices[0].y-=.45,l.vertices[1].y-=.45,l.vertices[2].y-=.2,l.vertices[3].y-=.2,l.vertices[0].x-=.5,l.vertices[1].x-=.5,l.vertices[2].x-=.5,l.vertices[3].x-=.5,l.vertices[0].z+=.45,l.vertices[1].z+=.85,l.vertices[2].z+=.45,l.vertices[3].z+=.85,l.vertices[4].z+=.02,l.vertices[6].z-=.04,r.merge(l),(m=new THREE.BoxGeometry(1,.4,.5)).translate(-.85,1.8,0),m.vertices[5].y-=.45,m.vertices[4].y-=.45,m.vertices[7].y-=.2,m.vertices[6].y-=.2,m.vertices[5].x+=.5,m.vertices[4].x+=.5,m.vertices[7].x+=.5,m.vertices[6].x+=.5,m.vertices[5].z+=.45,m.vertices[4].z+=.85,m.vertices[7].z+=.45,m.vertices[6].z+=.85,m.vertices[1].z+=.02,m.vertices[3].z-=.04,r.merge(m),E.translate(-.1,0,-5),r.merge(E),r.scale(.5,.5,.5),r.rotateY(-.35),r.translate(5.95,.6,5.875),g=~~(3*Math.random());const w=new THREE.Mesh(r,i[g]);v.add(w),c.merge(r);const y=new THREE.BoxGeometry(1,1.4,.8);y.vertices[0].z-=.15,y.vertices[0].x-=.15,y.vertices[1].z+=.15,y.vertices[1].x-=.15,y.vertices[4].z+=.15,y.vertices[4].x+=.15,y.vertices[5].z-=.15,y.vertices[5].x+=.15,y.scale(.5,.5,.5),y.rotateY(-1),y.translate(2.55,1.25,6.4),o.merge(y),y.rotateY(1.5),y.translate(-2,0,8),o.merge(y),y.rotateY(-.8),y.translate(7,0,-1.5),o.merge(y);const T=new THREE.Mesh(o,palegray);v.add(T),c.merge(o);const H=new THREE.Geometry,x=new THREE.BoxGeometry(.2,.5,.4);x.translate(-.13,.17,0),x.vertices[0].z-=.05,x.vertices[1].z+=.05,x.vertices[4].z+=.05,x.vertices[4].x+=.05,x.vertices[5].z-=.05,x.vertices[5].x+=.05,H.merge(x);const R=new THREE.BoxGeometry(.2,.5,.4);R.translate(.13,.17,0),R.vertices[5].z-=.05,R.vertices[4].z+=.05,R.vertices[1].z+=.05,R.vertices[1].x-=.05,R.vertices[0].z-=.05,R.vertices[0].x-=.05,H.merge(R);const h=new THREE.BoxGeometry(.2,.5,.025);h.translate(0,.17,-.1875),h.vertices[0].z+=.05,h.vertices[1].z+=.05,h.vertices[4].z+=.05,h.vertices[5].z+=.05,H.merge(h),H.rotateY(-1),H.translate(2.55,1.19,6.4),n.merge(H),H.rotateY(1.5),H.translate(-2,0,8),n.merge(H),H.rotateY(-.8),H.translate(7,0,-1.5),n.merge(H);const u=new THREE.SphereGeometry(.2,32,32,1,6.3,0,1.5);u.translate(2.55,1.83,6.39),n.merge(u),u.translate(2,0,-.5),n.merge(u),u.translate(1.425,0,-.125),n.merge(u);const M=new THREE.CylinderGeometry(.2,.2,.02,32);M.translate(2.45,1.846,6.45),n.merge(M),M.translate(2.15,0,-.45),n.merge(M),M.translate(1.325,0,-.125),n.merge(M);const G=new THREE.Mesh(n,truckMaterial);v.add(G),c.merge(n);const p=new THREE.Geometry,z=new THREE.BoxGeometry(.05,.5,.001);z.translate(-.11,.17,.201),z.vertices[0].z-=.05,z.vertices[1].z-=.05,z.vertices[4].z-=.05,z.vertices[5].z-=.05,p.merge(z),z.translate(.22,0,0),p.merge(z);const B=new THREE.BoxGeometry(.05,.5,.001);B.translate(-.11,.17,-.201),B.vertices[0].z+=.05,B.vertices[1].z+=.05,B.vertices[4].z+=.05,B.vertices[5].z+=.05,p.merge(B),B.translate(.22,0,0),p.merge(B);const f=new THREE.BoxGeometry(.05,.001,.3);f.translate(-.11,.42,0),p.merge(f),f.translate(.22,0,0),p.merge(f);const S=new THREE.BoxGeometry(.2,.2,.001);S.translate(-.13,.02,.201),S.vertices[4].x+=.02,S.vertices[5].x+=.02,S.vertices[0].z-=.02,S.vertices[1].z-=.02,S.vertices[4].z-=.02,S.vertices[5].z-=.02,p.merge(S);const b=new THREE.BoxGeometry(.2,.2,.001);b.translate(.13,.02,.201),b.vertices[0].x-=.02,b.vertices[1].x-=.02,b.vertices[0].z-=.02,b.vertices[1].z-=.02,b.vertices[4].z-=.02,b.vertices[5].z-=.02,p.merge(b);const k=new THREE.BoxGeometry(.001,.2,.4);k.translate(-.23,.02,0),k.vertices[0].x+=.02,k.vertices[1].x+=.02,k.vertices[4].x+=.02,k.vertices[5].x+=.02,k.vertices[0].z-=.02,k.vertices[1].z+=.02,k.vertices[4].z+=.02,k.vertices[5].z-=.02,p.merge(k);const L=new THREE.BoxGeometry(.001,.2,.4);L.translate(.23,.02,0),L.vertices[0].x-=.02,L.vertices[1].x-=.02,L.vertices[4].x-=.02,L.vertices[5].x-=.02,L.vertices[0].z-=.02,L.vertices[1].z+=.02,L.vertices[4].z+=.02,L.vertices[5].z-=.02,p.merge(L);const C=new THREE.BoxGeometry(.45,.2,.001);C.translate(0,.02,-.201),C.vertices[0].x-=.02,C.vertices[1].x-=.02,C.vertices[4].x+=.02,C.vertices[5].x+=.02,C.vertices[0].z+=.02,C.vertices[1].z+=.02,C.vertices[4].z+=.02,C.vertices[5].z+=.02,p.merge(C),p.merge(h),p.rotateY(-1),p.translate(2.55,1.19,6.4),a.merge(p),p.rotateY(1.5),p.translate(-2,0,8),a.merge(p),p.rotateY(-.8),p.translate(7,0,-1.5),a.merge(p);const Y=new THREE.Mesh(a,yellow);v.add(Y),c.merge(a);const O=new THREE.BoxGeometry(.5,.8,.8);O.vertices[0].x-=.1,O.vertices[1].x-=.1,O.vertices[2].x-=.3,O.vertices[2].z-=.3,O.vertices[3].x-=.3,O.vertices[3].z+=.3,O.vertices[6].z+=.3,O.vertices[7].z-=.3,O.scale(.5,.5,.5),O.rotateY(-1),O.translate(2.485,.702,6.3),s.merge(O),O.rotateY(1.5),O.translate(-2,0,8),s.merge(O),O.rotateY(-.8),O.translate(7,0,-1.5),s.merge(O);const j=new THREE.BoxGeometry(.5,.8,.8);j.vertices[4].x+=.1,j.vertices[5].x+=.1,j.vertices[2].z-=.3,j.vertices[3].z+=.3,j.vertices[6].x+=.3,j.vertices[6].z+=.3,j.vertices[7].x+=.3,j.vertices[7].z-=.3,j.scale(.5,.5,.5),j.rotateY(-1),j.translate(2.615,.702,6.5),s.merge(j),j.rotateY(1.5),j.translate(-2,0,8),s.merge(j),j.rotateY(-.8),j.translate(7,0,-1.5),s.merge(j);const D=new THREE.Mesh(s,blue);v.add(D),c.merge(s);const N=new THREE.BoxGeometry(.8,.6,.025);N.rotateX(.3),N.rotateY(-.3),N.translate(5.85,1.3,6.15);const A=new THREE.Mesh(N,white);v.add(A),c.merge(N);const W=new THREE.Mesh(c,shadows);v.add(W),v.castShadow=!0,v.position.set(-2.35,-.03,-17.55),scene.add(v)}function render(){scene.position.set(0,0,3),renderer.render(scene,camera)}function animate(){render(),controls.update()}function focusChange(e){e.parentNode.classList.add("inputFocus"),e.parentNode.classList.add("filled")}function focusStop(e){e.parentNode.classList.remove("inputFocus"),e.value||e.parentNode.classList.remove("filled")}init(),animate();const arrows=[[],[],[],[],[],[],[]];function arrowArray(e,t){const r=arrows[e].indexOf(t.value);-1!==r&&arrows[e].splice(r,1),t.checked&&arrows[e].unshift(t.value)}function arrowSign(e,t){let r=new THREE.Geometry,n=new THREE.Geometry;new THREE.Geometry;const a=new THREE.BoxGeometry(3.5,4,1);a.rotateY(-1.2),a.center();const s=new THREE.Mesh(a,clickBoxMaterial),o=s.clone(),c=new THREE.CylinderGeometry(.05,.05,.5,32);c.translate(-1.1,2.95,-16.1),n.merge(c),c.translate(0,-.5,0),n.merge(c),c.translate(0,-.5,0),n.merge(c),c.translate(0,-.47,0),n.merge(c),c.translate(-.2,0,0),n.merge(c),c.translate(0,-.5,0),n.merge(c),c.translate(2.501,0,0),n.merge(c),c.translate(0,.5,0),n.merge(c),c.translate(-.2,0,0),n.merge(c),c.translate(0,.47,0),n.merge(c),c.translate(0,.5,0),n.merge(c),c.translate(0,.5,0),n.merge(c);const i=new THREE.CylinderGeometry(.05,.05,2.601,32);i.rotateZ(1.58),i.translate(-.05,1.75,-16.1),n.merge(i),i.translate(0,-.5,0),n.merge(i),i.translate(0,-.5,0),n.merge(i);const l=new THREE.CylinderGeometry(.3,.3,.3,32,1,!1,0,3.1);l.rotateZ(1.58),l.translate(1.4,.75,-16.1),n.merge(l),l.translate(-2.9,0,0),n.merge(l);const m=new THREE.CylinderGeometry(.1,.1,.2,32);m.rotateX(1.55),m.translate(-.4,3.7,-16.1),n.merge(m),m.translate(-.35,-.35,0),n.merge(m),m.translate(-.35,-.35,0),n.merge(m),m.translate(.7,0,0),n.merge(m),m.translate(.35,0,0),n.merge(m),m.translate(.35,0,0),n.merge(m),m.translate(.35,0,0),n.merge(m),m.translate(.35,0,0),n.merge(m),m.translate(-1.75,-.35,0),n.merge(m),m.translate(.35,-.35,0),n.merge(m),n.translate(0,0,.15),n.rotateY(-1.2),n.center();const E=new THREE.Mesh(n,e);E.castShadow=!0,s.add(E);const g=E.clone();g.translateOnAxis(new THREE.Vector3(1,0,-1).normalize(),.09),o.add(g);const v=new THREE.BoxGeometry(3,2.2,.2);v.translate(0,3,-16),r.merge(v);const d=new THREE.CylinderGeometry(.26,.26,.26,32);d.rotateZ(1.58),d.translate(1.4,.74,-16),r.merge(d),d.translate(-2.9,0,0),r.merge(d),r.rotateY(-1.2),r.center(),r.translate(.025,0,-.025);const w=new THREE.Mesh(r,gray);w.castShadow=!0,s.add(w);const y=w.clone();o.add(y),s.name=t+"-arrow1",s.position.set(-1,2.3,-16),scene.add(s),flaggers.push(s),o.name=t+"-arrow2",o.rotation.set(0,-.8,0),o.position.set(10,2.3,-16),scene.add(o),flaggers.push(o)}const end=[[],[],[],[],[],[],[]];function endArray(e,t){const r=end[e].indexOf(t.value);-1!==r&&end[e].splice(r,1),t.checked&&end[e].unshift(t.value)}function endSign(e,t){const r=new THREE.BoxGeometry(2.8,2.25,.1);r.rotateX(-1.6);const n=new THREE.BoxGeometry(3.2,3.2,.1);n.rotateX(-1.6);let a=25;0!==Math.abs(t%2)&&(a-=3),r.translate(a,.5,4*t-9.75);let s=new THREE.Mesh(r,endSignMaterial);n.translate(a,.48,4*t-10);let o=new THREE.Mesh(n,e);s.add(o),s.name="signGroup-"+t,s.castShadow=!0,scene.add(s)}let yHolder,currentHex=[],movingOn=!1;function onDocumentMouseDown(e){if(e.preventDefault(),hovered){let t=hovered.children,r=hovered.children[0].material;if(controls.enabled=!1,movingOn){mouse.x=(e.clientX-rect.left)/canv.clientWidth*2-1,mouse.y=-(e.clientY-rect.top)/canv.clientHeight*2+1,raycaster.setFromCamera(mouse,camera);const r=raycaster.intersectObject(objectPlane);r.length>0&&hovered.position.set(r[0].point.x,yHolder,r[0].point.z-3);let n=0;t.forEach(e=>{e.material=currentHex[n],n++}),currentHex=[],movingOn=!1,container.addEventListener("mousemove",onDocumentMouseMove,!1)}else container.removeEventListener("mousemove",onDocumentMouseMove,!1),movingOn=!0,yHolder=hovered.position.y,t.forEach(e=>{currentHex.push(e.material)}),glow.color.setHex(r.color.getHex()),t.forEach(e=>{e.material=glow}),hovered.position.set(hovered.position.x,hovered.position.y+1,hovered.position.z);render()}}function onDocumentTouchStart(e){e.preventDefault(),e=e.changedTouches[0],mouse.x=(e.clientX-rect.left)/canv.clientWidth*2-1,mouse.y=-(e.clientY-rect.top)/canv.clientHeight*2+1,raycaster.setFromCamera(mouse,camera);const t=raycaster.intersectObjects(flaggers),r=raycaster.intersectObject(objectPlane);if(t.length>0&&(controls.enabled=!1,hovered!==t[0].object&&(hovered=t[0].object)),hovered){let e=hovered.children,t=hovered.children[0].material;if(movingOn){r.length>0&&hovered.position.set(r[0].point.x,yHolder,r[0].point.z-3);let t=0;e.forEach(e=>{e.material=currentHex[t],t++}),currentHex=[],movingOn=!1,container.addEventListener("touchmove",onDocumentTouchMove,!1)}else container.removeEventListener("touchmove",onDocumentTouchMove,!1),movingOn=!0,yHolder=hovered.position.y,e.forEach(e=>{currentHex.push(e.material)}),glow.color.setHex(t.color.getHex()),e.forEach(e=>{e.material=glow}),hovered.position.set(hovered.position.x,hovered.position.y+1,hovered.position.z);render()}}const canv=renderer.domElement,rect=canv.getBoundingClientRect();function onDocumentMouseMove(e){e.preventDefault(),mouse.x=(e.clientX-rect.left)/canv.clientWidth*2-1,mouse.y=-(e.clientY-rect.top)/canv.clientHeight*2+1,raycaster.setFromCamera(mouse,camera);const t=raycaster.intersectObjects(flaggers),r=raycaster.intersectObject(objectPlane);r.length>0&&(testPoint=r[0]),t.length>0?(hovered!==t[0].object&&(hovered=t[0].object),canv.style.cursor="pointer"):(hovered=null,canv.style.cursor="auto")}function onDocumentTouchMove(e){e.preventDefault(),e=e.changedTouches[0],mouse.x=(e.clientX-rect.left)/canv.clientWidth*2-1,mouse.y=-(e.clientY-rect.top)/canv.clientHeight*2+1,raycaster.setFromCamera(mouse,camera);const t=raycaster.intersectObject(objectPlane);selected&&t.length>0&&(selected.position.set(t[0].point.x,selected.position.y,t[0].point.z),render())}function onDocumentMouseCancel(e){e.preventDefault(),movingOn||(controls.enabled=!0,hovered=null,canv.style.cursor="auto")}function onDocumentTouchEnd(e){e.preventDefault(),movingOn||(controls.enabled=!0,hovered=null,canv.style.cursor="auto")}const clearCones=(e,t)=>{if(scene.getObjectByName(e+"-cones")&&scene.remove(scene.getObjectByName(e+"-cones")),scene.getObjectByName("signGroup-"+e)&&scene.remove(scene.getObjectByName("signGroup-"+e)),scene.getObjectByName(e+"-flagger1")&&scene.remove(scene.getObjectByName(e+"-flagger1")),scene.getObjectByName(e+"-flagger2")&&scene.remove(scene.getObjectByName(e+"-flagger2")),scene.getObjectByName(e+"-arrow1")&&scene.remove(scene.getObjectByName(e+"-arrow1")),scene.getObjectByName(e+"-arrow2")&&scene.remove(scene.getObjectByName(e+"-arrow2")),t){let t=document.getElementsByName("input-"+e);for(let e=0;e<t.length;e++)"checkbox"==t[e].type&&(t[e].checked=!1),"text"==t[e].type&&(t[e].value="");slide("group-"+e)}flaggers=[],render()},renderCones=(e,t)=>{clearCones(e,!1);const r=new THREE.Geometry,n=coneGeometry.clone(!0),a=stripeGeometry.clone(!0),s=new THREE.Geometry,o=new THREE.Geometry;let c;switch(e){case 1:c=-1;break;case 2:c=-1.5;break;case 3:c=-2;break;case 4:c=-2.5;break;case 5:c=-3;break;case 6:c=-3.5}const i=Number(document.getElementById("buffer-"+e).value)/50;n.translate(c,.75,-19),s.merge(n),a.translate(c,.75,-19),o.merge(a);let l=c;for(let e=c;e>=c-i;e-=2)n.translate(-2,0,0),s.merge(n),a.translate(-2,0,0),o.merge(a),l-=2;const m=Number(document.getElementById("upstream-"+e).value)/50;let E=Math.pow(m,2)+Math.pow(4.5,2),g=m/(E=Math.floor(Math.sqrt(E))/2),v=4.5/E,d=0;n.translate(-2,0,0),s.merge(n),a.translate(-2,0,0),o.merge(a);let w=(l-=2)-m;for(let e=l;e>w;e-=g)n.translate(-g,0,v),s.merge(n),a.translate(-g,0,v),o.merge(a),d+=v,l-=g;switch(signSpace(t,e),e){case 1:c=10;break;case 2:c=10.5;break;case 3:c=11;break;case 4:c=11.5;break;case 5:c=12;break;case 6:c=12.5}n.translate(Math.abs(l)+c,0,-d),s.merge(n),a.translate(Math.abs(l)+c,0,-d),o.merge(a),l=c;const y=Number(document.getElementById("downbuff-"+e).value)/50;if(y&&y>0)for(let e=c;e<=c+y;e+=2)n.translate(2,0,0),s.merge(n),a.translate(2,0,0),o.merge(a),l+=2;const T=Number(document.getElementById("downstream-"+e).value)/50;n.translate(2,0,0),s.merge(n),a.translate(2,0,0),o.merge(a),l+=2,E=Math.pow(T,2)+Math.pow(4.5,2),g=T/(E=Math.floor(Math.sqrt(E))/2),v=4.5/E,d=0,w=l+T;for(let e=l;e<w;e+=g)n.translate(g,0,v),s.merge(n),a.translate(g,0,v),o.merge(a),d+=v;const H=new THREE.Mesh(s,t);r.merge(s);const x=new THREE.Mesh(o,white);H.add(x),r.merge(o);const R=new THREE.Mesh(r,shadows);H.add(R),H.castShadow=!0,H.name=e+"-cones",scene.add(H),slide("group-"+e),flagger(e,t),render()},signs=[[],[],[],[],[],[],[]];function signArray(e,t){const r=signs[e].indexOf(t.value);-1!==r&&signs[e].splice(r,1),t.checked&&signs[e].unshift(t.value)}function signSpace(e,t){const r=new THREE.Geometry,n=new THREE.Geometry,a=new THREE.Geometry,s=[e,workerSignMaterial,flaggerSignMaterial,leftSignMaterial,rightSignMaterial,prepareStopSignMaterial,oneLaneSignMaterial,machineAheadSignMaterial,workAheadSignMaterial,constSignMaterial,utilitySignMaterial,rLaneSignMaterial,menWorkSignMaterial,lLaneMaterial,fMenSignMaterial,flagAheadSignMaterial,closedSignMaterial,shadows],o=signs[t],c=new THREE.CylinderGeometry(2.8,2.8,.1,4),i=new THREE.CylinderGeometry(3.2,3.2,.1,4);let l,m=12.5;if(0!==Math.abs(t%2)&&(m-=3),c.rotateY(1.6),c.translate(m,.5,4*t-10),i.rotateY(1.6),i.translate(m,.48,4*t-10),o.length>0){var E=document.getElementById("sign-"+t).value;(new THREE.FontLoader).load("fonts/helvetiker_regular.typeface.json",(function(e){var r=new THREE.TextGeometry(E,{font:e,size:2,height:.2,curveSegments:12,bevelEnabled:!1});r.rotateX(-1.6);let n=new THREE.Mesh(r,white);n.position.set(m+4,.5,4*t-9),scene.add(n),render()}))}for(let e=0;e<o.length;e++){switch(o[e]){case"worker":l=1;break;case"flagger":l=2;break;case"left":l=3;break;case"right":l=4;break;case"stop":l=5;break;case"lane":l=6;break;case"machine":l=7;break;case"road":l=8;break;case"const":l=9;break;case"utility":l=10;break;case"rLane":l=11;break;case"men":l=12;break;case"lLane":l=13;break;case"flag":l=14;break;case"fAhead":l=15;break;case"laneAhead":l=16;break;default:l=6}for(var g=0;g<c.faces.length;g++)c.faces[g].materialIndex=l;r.mergeMesh(new THREE.Mesh(c)),a.merge(c),n.merge(i),c.translate(-6.5,0,0),i.translate(-6.5,0,0)}const v=new THREE.Mesh(n,e);a.merge(n);const d=new THREE.Mesh(a,shadows);v.add(d);const w=new THREE.Mesh(r,s);v.add(w),v.castShadow=!0,v.name="signGroup-"+t,scene.add(v),arrows[t].length>0&&arrowSign(e,t),end[t].length>0&&endSign(e,t)}